{"remainingRequest":"/Users/Sam/www/web/code-standards/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/Sam/www/web/code-standards/node_modules/vuepress/lib/app/root-mixins/updateMeta.js","dependencies":[{"path":"/Users/Sam/www/web/code-standards/node_modules/vuepress/lib/app/root-mixins/updateMeta.js","mtime":1526999372000},{"path":"/Users/Sam/www/web/code-standards/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/Sam/www/web/code-standards/node_modules/babel-loader/lib/index.js","mtime":1526583314000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport _toConsumableArray from \"/Users/Sam/www/web/code-standards/node_modules/@babel/runtime/helpers/builtin/es6/toConsumableArray\";\nexport default {\n  created: function created() {\n    if (this.$ssrContext) {\n      this.$ssrContext.title = this.$title;\n      this.$ssrContext.lang = this.$lang;\n      this.$ssrContext.description = this.$page.description || this.$description;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // update title / meta tags\n    this.currentMetaTags = [];\n\n    var updateMeta = function updateMeta() {\n      document.title = _this.$title;\n      document.documentElement.lang = _this.$lang;\n      var meta = [{\n        name: 'description',\n        content: _this.$description\n      }].concat(_toConsumableArray(_this.$page.frontmatter.meta || []));\n      _this.currentMetaTags = updateMetaTags(meta, _this.currentMetaTags);\n    };\n\n    this.$watch('$page', updateMeta);\n    updateMeta();\n  },\n  beforeDestroy: function beforeDestroy() {\n    updateMetaTags(null, this.currentMetaTags);\n  }\n};\n\nfunction updateMetaTags(meta, current) {\n  if (current) {\n    current.forEach(function (c) {\n      document.head.removeChild(c);\n    });\n  }\n\n  if (meta) {\n    return meta.map(function (m) {\n      var tag = document.createElement('meta');\n      Object.keys(m).forEach(function (key) {\n        tag.setAttribute(key, m[key]);\n      });\n      document.head.appendChild(tag);\n      return tag;\n    });\n  }\n}",{"version":3,"sources":["node_modules/vuepress/lib/app/root-mixins/updateMeta.js"],"names":["created","$ssrContext","title","$title","lang","$lang","description","$page","$description","mounted","currentMetaTags","updateMeta","document","documentElement","meta","name","content","frontmatter","updateMetaTags","$watch","beforeDestroy","current","forEach","head","removeChild","c","map","tag","createElement","Object","keys","m","setAttribute","key","appendChild"],"mappings":";;;;;;AAAA,eAAe;AACbA,SADa,qBACF;AACT,QAAI,KAAKC,WAAT,EAAsB;AACpB,WAAKA,WAAL,CAAiBC,KAAjB,GAAyB,KAAKC,MAA9B;AACA,WAAKF,WAAL,CAAiBG,IAAjB,GAAwB,KAAKC,KAA7B;AACA,WAAKJ,WAAL,CAAiBK,WAAjB,GAA+B,KAAKC,KAAL,CAAWD,WAAX,IAA0B,KAAKE,YAA9D;AACD;AACF,GAPY;AAQbC,SARa,qBAQF;AAAA;;AACT;AACA,SAAKC,eAAL,GAAuB,EAAvB;;AACA,QAAMC,aAAa,SAAbA,UAAa,GAAM;AACvBC,eAASV,KAAT,GAAiB,MAAKC,MAAtB;AACAS,eAASC,eAAT,CAAyBT,IAAzB,GAAgC,MAAKC,KAArC;AACA,UAAMS,QACJ;AACEC,cAAM,aADR;AAEEC,iBAAS,MAAKR;AAFhB,OADI,4BAKA,MAAKD,KAAL,CAAWU,WAAX,CAAuBH,IAAvB,IAA+B,EAL/B,EAAN;AAOA,YAAKJ,eAAL,GAAuBQ,eAAeJ,IAAf,EAAqB,MAAKJ,eAA1B,CAAvB;AACD,KAXD;;AAYA,SAAKS,MAAL,CAAY,OAAZ,EAAqBR,UAArB;AACAA;AACD,GAzBY;AA0BbS,eA1Ba,2BA0BI;AACfF,mBAAe,IAAf,EAAqB,KAAKR,eAA1B;AACD;AA5BY,CAAf;;AA+BA,SAASQ,cAAT,CAAyBJ,IAAzB,EAA+BO,OAA/B,EAAwC;AACtC,MAAIA,OAAJ,EAAa;AACXA,YAAQC,OAAR,CAAgB,aAAK;AACnBV,eAASW,IAAT,CAAcC,WAAd,CAA0BC,CAA1B;AACD,KAFD;AAGD;;AACD,MAAIX,IAAJ,EAAU;AACR,WAAOA,KAAKY,GAAL,CAAS,aAAK;AACnB,UAAMC,MAAMf,SAASgB,aAAT,CAAuB,MAAvB,CAAZ;AACAC,aAAOC,IAAP,CAAYC,CAAZ,EAAeT,OAAf,CAAuB,eAAO;AAC5BK,YAAIK,YAAJ,CAAiBC,GAAjB,EAAsBF,EAAEE,GAAF,CAAtB;AACD,OAFD;AAGArB,eAASW,IAAT,CAAcW,WAAd,CAA0BP,GAA1B;AACA,aAAOA,GAAP;AACD,KAPM,CAAP;AAQD;AACF","sourceRoot":"/Users/Sam/www/web/code-standards","sourcesContent":["export default {\n  created () {\n    if (this.$ssrContext) {\n      this.$ssrContext.title = this.$title\n      this.$ssrContext.lang = this.$lang\n      this.$ssrContext.description = this.$page.description || this.$description\n    }\n  },\n  mounted () {\n    // update title / meta tags\n    this.currentMetaTags = []\n    const updateMeta = () => {\n      document.title = this.$title\n      document.documentElement.lang = this.$lang\n      const meta = [\n        {\n          name: 'description',\n          content: this.$description\n        },\n        ...(this.$page.frontmatter.meta || [])\n      ]\n      this.currentMetaTags = updateMetaTags(meta, this.currentMetaTags)\n    }\n    this.$watch('$page', updateMeta)\n    updateMeta()\n  },\n  beforeDestroy () {\n    updateMetaTags(null, this.currentMetaTags)\n  }\n}\n\nfunction updateMetaTags (meta, current) {\n  if (current) {\n    current.forEach(c => {\n      document.head.removeChild(c)\n    })\n  }\n  if (meta) {\n    return meta.map(m => {\n      const tag = document.createElement('meta')\n      Object.keys(m).forEach(key => {\n        tag.setAttribute(key, m[key])\n      })\n      document.head.appendChild(tag)\n      return tag\n    })\n  }\n}\n"]}]}