"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1481],{4952:(e,t,s)=>{s.r(t),s.d(t,{default:()=>f});var i=s(6252);const r=(0,i.uE)('<h1 id="pull-requests" tabindex="-1"><a class="header-anchor" href="#pull-requests" aria-hidden="true">#</a> Pull Requests</h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>This document details what is expected of you and what you can expect during the PR review process. This guide is not definitive or exhaustive but it does cover many of the common obstacles that we all come across. Remember that the intention of a review is to ensure the code quality is as high as possible and discussion is always welcome.</p><p>We run all of our code through pull requests for a variety of reasons. These include:</p><ul><li>Sanity checking of logic</li><li>Code style checks</li><li>Mentoring opportunities</li></ul><p>PRs are the responsibility of all engineers and it’s important that everyone plays a part in this.</p><h2 id="making-a-pull-request" tabindex="-1"><a class="header-anchor" href="#making-a-pull-request" aria-hidden="true">#</a> Making a Pull Request</h2><p>When creating a pull request, there are a few things to watch out for. Firstly, ensure the base branch is set correctly. The majority of our repos have a master and develop branch and in this case, your work should be merged into develop unless it’s a release from develop to master.</p>',8),o=(0,i.Uk)("Once your branches are set, Github will populate the description with a pull request skeleton. New projects use the template detailed "),a={href:"https://netsells.atlassian.net/wiki/spaces/NO/pages/1024327708/Github+Templates",target:"_blank",rel:"noopener noreferrer"},n=(0,i.Uk)("here"),l=(0,i.Uk)(". Most of our legacy projects use a simplified version of this template. You should fill this template in with as much detail as possible to ensure reviewers fully understand the purpose of your PR. Images are welcome here to aid the PR process."),u=(0,i.Uk)("The title of your PR should be <taskId> - <description> as specified by our "),h={href:"https://netsells.atlassian.net/wiki/spaces/NS/pages/972980281/Netsells+Probot+PR+Title+Checker",target:"_blank",rel:"noopener noreferrer"},d=(0,i.Uk)("Probot checker"),c=(0,i.Uk)(". See the "),p=(0,i.Uk)("Git"),m=(0,i.Uk)(" pages for more detailed information."),g=(0,i.uE)('<p>Finally, you should ensure there are no merge conflicts. Again, Probot will send you a message if conflicts exist. The easiest way to resolve conflicts is to merge the target branch into your branch and resolve the conflicts on your branch. You can then push the resolved commit to your branch.</p><h2 id="linters-and-ci-tests" tabindex="-1"><a class="header-anchor" href="#linters-and-ci-tests" aria-hidden="true">#</a> Linters and CI Tests</h2><p>The majority of projects have automated test suites and linters which are run by our continuous integration tools Travis and Github Actions. These are set up to ensure that your changes to the codebase don’t break existing functionality or violate the code standards for your language. If your changes fail the CI tests, they will mark it as failed on the repository. It is your responsibility to resolve these issues at this point, preferably before requesting a review.</p><h2 id="requesting-a-review" tabindex="-1"><a class="header-anchor" href="#requesting-a-review" aria-hidden="true">#</a> Requesting a review</h2><p>To request a review, select the people that you want from the dropdown panel. You should add a reviewer for each discipline that your PR changes, for example if you build a tool for Nova admin panel you will need both a frontend and backend reviewer. For large or complicated changes, several reviewers are recommended to ensure multiple sets of eyes see them. You should aim to bring in a more senior developer to review your code and junior developers can be added if you believe reviewing the code would be of benefit to them.</p><p>If there are multiple developers within your discipline on the project you are submitting a pull request for, please assign them as reviewers in the first instance. If you are the only developer within your discipline on the project you are submitting a pull request for, please assign any other developer from within your discipline as reviewers. It would be sensible to assign a number of potential reviewers, for example if you are the only frontend developer on a project, you could assign pull requests to other frontend developers, even if they are not working on that project.</p><p>As a general rule of thumb we suggest a minimum of two developers per pull request and maximum of three. The minimum accounts for one of your reviewers potentially being unable to review imminently, and the maximum prevents an overkill situation where all developers are getting notified for every pull request.</p><h2 id="review-comments" tabindex="-1"><a class="header-anchor" href="#review-comments" aria-hidden="true">#</a> Review Comments</h2><p>When leaving a review, we use two types of pull request comments: <strong>MUST</strong> and <strong>SHOULD</strong>. These keywords will indicate the requirement level of a comment. If a reviewer leaves a <strong>MUST</strong> comment, the pull request will be rejected pending changes. It is up to the reviewers discretion to decide whether a PR is rejected due to <strong>SHOULD</strong> comments. Comments can also be left without this syntax which could be a general question asking you for more information or a piece of information that you may not know.</p><p>Comments should be critical, informative and descriptive enough for you to implement the suggestion. Comments such as “this is wrong” or “this doesn’t work” are not acceptable and should be replaced with an explanation of the problem and suggestions for the solution, including code snippets where appropriate.</p><p>Examples of appropriate comments;</p><p><code>MUST: It looks like you&#39;ve missed an import for the DB facade, make sure you prefix with a \\ to avoid exceptions!</code></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>SHOULD: we typically split arrays onto multiple lines for better gif diffs (with a trailing comma)\n\n&#39;user&#39; =&gt; [\n    &#39;first_name&#39;, \n    &#39;last_name&#39;,\n],\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="comment-tips-and-examples-for-reviewers" tabindex="-1"><a class="header-anchor" href="#comment-tips-and-examples-for-reviewers" aria-hidden="true">#</a> Comment Tips and Examples for Reviewers</h2><ul><li>Try to give clear instructions on what you want changing and do not refer to in-person discussions. Pull requests are often looked back on to understand why decisions were made; &quot;as we spoke about on Tuesday&quot; does not help anyone 5 months later!</li><li>If an in-person discussion is needed (ie it&#39;ll be a lengthy comment thread) - make sure you post back with the summary so it&#39;s known to others</li><li>Provide clear examples whenever possible to help mentor and avoid excessive back and forth with clarifications.</li><li>As a reviewer please keep your feedback constructive and try to ensure your first review is thorough to avoid sending the pull request back multiple times for changes that could have been requested within the first review.</li><li>Read every line of code</li><li>Don&#39;t hold author hostage - We have enough power to block a PR, lets not use this for evil by requesting changes outside the scope of the PR. e.g fixing old code</li><li>Add links to comments where appropriate. External docs and discussions around topics are extremely valuable learning resources.</li><li>Please log the time you’ve spent on a pull request against the task the pull request is for, which should be detailed in both the pull request title and the description. Please ensure that when you add your time log you have checked the option labelled ‘Reviewing PR’.</li><li>To avoid multiple people reviewing the same pull request, please add yourself as an assignee as you start to review it. This way everyone else assigned can see you are already reviewing the pull request and can move onto the next one on their list.</li><li>Developers should need no more than around 30 minutes a day for reviewing PRs. We suggest everyone blocks out 30 minutes of their morning to look through any pull requests they have been assigned to.</li><li>There is a GitHub slack integration which we suggest everyone sets up, which will notify you whenever you are assigned to a pull request. This will ensure that no pull request gets missed and will give people a clearer picture of what they’re assigned to. You can set up reminders here https://github.com/settings/reminders/.</li></ul><h2 id="back-to-qa" tabindex="-1"><a class="header-anchor" href="#back-to-qa" aria-hidden="true">#</a> Back to QA?</h2><p>Depending on the size and scope of the changes requested to your PR it may be necessary to send the code back through QA. If you’re unsure whether the changes need to go back through QA, your reviewer will be able to give you guidance.</p><h2 id="merging" tabindex="-1"><a class="header-anchor" href="#merging" aria-hidden="true">#</a> Merging</h2><p>Once you have received an approving review, the code will be merged and the branch can be deleted. You can then move the task to “Ready to Deploy” on Jira, you have successfully completed your task!</p>',19),v={},f=(0,s(3744).Z)(v,[["render",function(e,t){const s=(0,i.up)("OutboundLink"),v=(0,i.up)("RouterLink");return(0,i.wg)(),(0,i.iD)(i.HY,null,[r,(0,i._)("p",null,[o,(0,i._)("a",a,[n,(0,i.Wm)(s)]),l]),(0,i._)("p",null,[u,(0,i._)("a",h,[d,(0,i.Wm)(s)]),c,(0,i.Wm)(v,{to:"/general/git.html"},{default:(0,i.w5)((()=>[p])),_:1}),m]),g],64)}]])},3744:(e,t)=>{t.Z=(e,t)=>{for(const[s,i]of t)e[s]=i;return e}},7492:(e,t,s)=>{s.r(t),s.d(t,{data:()=>i});const i={key:"v-60154c4d",path:"/general/pull-requests.html",title:"Pull Requests",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Overview",slug:"overview",children:[]},{level:2,title:"Making a Pull Request",slug:"making-a-pull-request",children:[]},{level:2,title:"Linters and CI Tests",slug:"linters-and-ci-tests",children:[]},{level:2,title:"Requesting a review",slug:"requesting-a-review",children:[]},{level:2,title:"Review Comments",slug:"review-comments",children:[]},{level:2,title:"Comment Tips and Examples for Reviewers",slug:"comment-tips-and-examples-for-reviewers",children:[]},{level:2,title:"Back to QA?",slug:"back-to-qa",children:[]},{level:2,title:"Merging",slug:"merging",children:[]}],filePathRelative:"general/pull-requests.md",git:{updatedTime:16547678e5,contributors:[{name:"Sam Turrell",email:"sam.turrell@netsells.co.uk",commits:1}]}}}}]);