(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{379:function(e,i,n){"use strict";n.r(i);var t=n(0),s=Object(t.a)({},function(){var e=this,i=e.$createElement,n=e._self._c||i;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"naming"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#naming","aria-hidden":"true"}},[e._v("#")]),e._v(" Naming")]),e._v(" "),n("p",[e._v("Descriptive and consistent naming makes software easier to read and understand. Use the Swift naming conventions described in the "),n("a",{attrs:{href:"https://swift.org/documentation/api-design-guidelines/",target:"_blank",rel:"noopener noreferrer"}},[e._v("API Design Guidelines"),n("OutboundLink")],1),e._v(". Some key takeaways include:")]),e._v(" "),n("ul",[n("li",[e._v("striving for clarity at the call site")]),e._v(" "),n("li",[e._v("prioritizing clarity over brevity")]),e._v(" "),n("li",[e._v("using camel case (not snake case)")]),e._v(" "),n("li",[e._v("using uppercase for types (and protocols), lowercase for everything else")]),e._v(" "),n("li",[e._v("including all needed words while omitting needless words")]),e._v(" "),n("li",[e._v("using names based on roles, not types")]),e._v(" "),n("li",[e._v("sometimes compensating for weak type information")]),e._v(" "),n("li",[e._v("striving for fluent usage")]),e._v(" "),n("li",[e._v("beginning factory methods with make")]),e._v(" "),n("li",[e._v("naming methods for their side effects\n"),n("ul",[n("li",[e._v("verb methods follow the -ed, -ing rule for the non-mutating version")]),e._v(" "),n("li",[e._v("noun methods follow the formX rule for the mutating version")]),e._v(" "),n("li",[e._v("boolean types should read like assertions")]),e._v(" "),n("li",[e._v("protocols that describe what something is should read as nouns")]),e._v(" "),n("li",[e._v("protocols that describe a capability should end in -able or -ible")])])]),e._v(" "),n("li",[e._v("using terms that don't surprise experts or confuse beginners")]),e._v(" "),n("li",[e._v("generally avoiding abbreviations")]),e._v(" "),n("li",[e._v("using precedent for names")]),e._v(" "),n("li",[e._v("preferring methods and properties to free functions")]),e._v(" "),n("li",[e._v("casing acronyms and initialisms uniformly up or down")]),e._v(" "),n("li",[e._v("giving the same base name to methods that share the same meaning")]),e._v(" "),n("li",[e._v("avoiding overloads on return type")]),e._v(" "),n("li",[e._v("choosing good parameter names that serve as documentation")]),e._v(" "),n("li",[e._v("preferring to name the first parameter instead of including its name in the * method name, except as mentioned under Delegates")]),e._v(" "),n("li",[e._v("labeling closure and tuple parameters")]),e._v(" "),n("li",[e._v("taking advantage of default parameters")])])])},[],!1,null,null,null);i.default=s.exports}}]);