"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2596],{3070:(e,n,t)=>{t.r(n),t.d(n,{default:()=>P});var a=t(6252),s=t(1553);const l=(0,a._)("h1",{id:"architecture-layers",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#architecture-layers","aria-hidden":"true"},"#"),(0,a.Uk)(" Architecture Layers")],-1),i=(0,a._)("p",null,[(0,a._)("img",{src:s,alt:"Architecture"})],-1),r=(0,a._)("p",null,[(0,a.Uk)("Flutter projects should contain 4 distinct layers: "),(0,a._)("strong",null,"presentation"),(0,a.Uk)(", "),(0,a._)("strong",null,"application"),(0,a.Uk)(", "),(0,a._)("strong",null,"domain"),(0,a.Uk)(", and "),(0,a._)("strong",null,"infrastructure"),(0,a.Uk)(".")],-1),c=(0,a._)("h2",{id:"ü•û-layer-definitions",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#ü•û-layer-definitions","aria-hidden":"true"},"#"),(0,a.Uk)(" ü•û Layer Definitions")],-1),o=(0,a._)("h3",{id:"‚ú®-presentation-layer",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#‚ú®-presentation-layer","aria-hidden":"true"},"#"),(0,a.Uk)(" ‚ú® Presentation Layer")],-1),u=(0,a._)("p",null,[(0,a.Uk)("The presentation layer should "),(0,a._)("em",null,"only"),(0,a.Uk)(" contain Widgets. Use this layer to implement your user interface.")],-1),d=(0,a._)("p",null,"As much as possible, Widget classes should be free of business logic. Form validation is a reasonable exception to this rule.",-1),p=(0,a._)("p",null,"Classes in the presentation layer should depend on classes from the application and domain layers.",-1),h=(0,a._)("h3",{id:"ü§ñ-application-layer",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#ü§ñ-application-layer","aria-hidden":"true"},"#"),(0,a.Uk)(" ü§ñ Application Layer")],-1),_=(0,a._)("p",null,"This is the main business logic layer of the application, and should contain BLoCs, Cubits, and use-cases.",-1),k=(0,a._)("p",null,"These classes should depend on entity/value-object classes and repository interfaces from the domain layer.",-1),m=(0,a._)("h3",{id:"üí≠-domain-layer",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#üí≠-domain-layer","aria-hidden":"true"},"#"),(0,a.Uk)(" üí≠ Domain Layer")],-1),y=(0,a._)("p",null,"Defines the core business domain, including entities, value-objects, and repository interfaces.",-1),b=(0,a._)("p",null,"These classes should be pure Dart (no Flutter imports) and should not depend on any other layers.",-1),f=(0,a._)("h3",{id:"üóÑ-infrastructure-layer",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#üóÑ-infrastructure-layer","aria-hidden":"true"},"#"),(0,a.Uk)(" üóÑ Infrastructure Layer")],-1),g=(0,a._)("p",null,"This layer contains implementations of the repository interfaces from the domain layer. Repository implementations may depend on other classes like data sources or REST API services.",-1),U=(0,a._)("p",null,"It's a good idea to use Data Transfer Objects (DTOs) which represent the structure of the data returned from external services. These can then be converted to and from your entity classes. This ensures the entities are not dependent on the data structure of objects returned from external services.",-1),v=(0,a._)("h2",{id:"üíâ-dependency-injection",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#üíâ-dependency-injection","aria-hidden":"true"},"#"),(0,a.Uk)(" üíâ Dependency Injection")],-1),w=(0,a._)("p",null,[(0,a._)("code",null,"get_it"),(0,a.Uk)(" + "),(0,a._)("code",null,"injectable"),(0,a.Uk)(" is a fantastic way of implementing dependency injection.")],-1),x=(0,a._)("p",null,[(0,a.Uk)("BLoCs and Cubits should be injected into the widget tree using "),(0,a._)("code",null,"BlocProvider"),(0,a.Uk)(". This allows the BLoC/Cubit to be accessible to all children via "),(0,a._)("code",null,"BlocProvider.of(context)"),(0,a.Uk)(". It also allows "),(0,a._)("code",null,"BlocListener"),(0,a.Uk)(", "),(0,a._)("code",null,"BlocBuilder"),(0,a.Uk)(", and "),(0,a._)("code",null,"BlocConsumer"),(0,a.Uk)(" to find instances automatically, and ensures the closure of underlying "),(0,a._)("code",null,"Stream"),(0,a.Uk)("s are handled automatically.")],-1),B=(0,a._)("div",{class:"language-dart ext-dart line-numbers-mode"},[(0,a._)("pre",{class:"language-dart"},[(0,a._)("code",null,[(0,a._)("span",{class:"token class-name"},"BlocProvider"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("\n\tcreate"),(0,a._)("span",{class:"token punctuation"},":"),(0,a.Uk)(),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("_"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token operator"},"="),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(),(0,a._)("span",{class:"token class-name"},"GetIt.I"),(0,a._)("span",{class:"token generics"},[(0,a._)("span",{class:"token punctuation"},"<"),(0,a._)("span",{class:"token class-name"},"MyBloc"),(0,a._)("span",{class:"token punctuation"},">")]),(0,a._)("span",{class:"token punctuation"},"("),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)("\n\tchild"),(0,a._)("span",{class:"token punctuation"},":"),(0,a.Uk)(),(0,a._)("span",{class:"token class-name"},"BlocBuilder"),(0,a._)("span",{class:"token generics"},[(0,a._)("span",{class:"token punctuation"},"<"),(0,a._)("span",{class:"token class-name"},"MyBloc"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(),(0,a._)("span",{class:"token class-name"},"MyState"),(0,a._)("span",{class:"token punctuation"},">")]),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("\n\t\tbuilder"),(0,a._)("span",{class:"token punctuation"},":"),(0,a.Uk)(),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("context"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(" state"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token punctuation"},"{"),(0,a.Uk)("\n\t\t\t"),(0,a._)("span",{class:"token comment"},"// TODO Implement builder"),(0,a.Uk)("\n\t\t"),(0,a._)("span",{class:"token punctuation"},"}"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)("\n\t"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},";"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br")])],-1),L=(0,a._)("h2",{id:"üìÇ-directory-structure",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#üìÇ-directory-structure","aria-hidden":"true"},"#"),(0,a.Uk)(" üìÇ Directory Structure")],-1),j=(0,a._)("p",null,[(0,a.Uk)("Most of our projects have the following top-level structure within the "),(0,a._)("code",null,"lib/"),(0,a.Uk)(" directory:")],-1),D=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"|- app/\n|- core/\n|- di/\n|- features/\n|- l10n/\n|- main_production.dart\n|- main_staging.dart\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br")])],-1),T=(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("code",null,"app/"),(0,a.Uk)(" contains anything to do with the top-level "),(0,a._)("code",null,"App"),(0,a.Uk)(" widget, which may include theming, routing/navigation, and other app-wide functionality.")]),(0,a._)("li",null,[(0,a._)("code",null,"core/"),(0,a.Uk)(" can contain anything which can be used throughout the application, like common widgets, models/entities, or services. "),(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Uk)("The "),(0,a._)("code",null,"core"),(0,a.Uk)(" directory should be split into sub-directories based on the architecture layers e.g. "),(0,a._)("code",null,"domain"),(0,a.Uk)(", "),(0,a._)("code",null,"presentation"),(0,a.Uk)(" etc.")])])]),(0,a._)("li",null,[(0,a._)("code",null,"di/"),(0,a.Uk)(" contains dependency injection code, such as environment definitions and modules")]),(0,a._)("li",null,[(0,a._)("code",null,"features/"),(0,a.Uk)(" is where we put our feature-specific code. Each feature should have its own sub-directory, within which we have further sub-directories for architecture layers.")]),(0,a._)("li",null,[(0,a._)("code",null,"l10n/"),(0,a.Uk)(" contains internationalization code, as per the Flutter Internationalization guide.")]),(0,a._)("li",null,[(0,a.Uk)("Any entry-points for the application (e.g. "),(0,a._)("code",null,"main_staging.dart"),(0,a.Uk)(") should sit at the top-level rather than within any directories.")])],-1),A=(0,a._)("h2",{id:"üèõ-architecture-best-practices",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#üèõ-architecture-best-practices","aria-hidden":"true"},"#"),(0,a.Uk)(" üèõ Architecture Best Practices")],-1),C=(0,a._)("ul",null,[(0,a._)("li",null,"Stateful Widgets should only be used when absolutely necessary (e.g. when building a form). Most of the time, it's better to use a BLoC with a Stateless Widget."),(0,a._)("li",null,"As much as possible, classes should depend on interfaces (implemented as abstract classes in Dart), not implementations.")],-1),I={},P=(0,t(3744).Z)(I,[["render",function(e,n){return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,i,r,c,o,u,d,p,h,_,k,m,y,b,f,g,U,v,w,x,B,L,j,D,T,A,C],64)}]])},3744:(e,n)=>{n.Z=(e,n)=>{for(const[t,a]of n)e[t]=a;return e}},848:(e,n,t)=>{t.r(n),t.d(n,{data:()=>a});const a={key:"v-50a1714c",path:"/flutter/architecture.html",title:"Architecture Layers",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"ü•û Layer Definitions",slug:"ü•û-layer-definitions",children:[{level:3,title:"‚ú® Presentation Layer",slug:"‚ú®-presentation-layer",children:[]},{level:3,title:"ü§ñ Application Layer",slug:"ü§ñ-application-layer",children:[]},{level:3,title:"üí≠ Domain Layer",slug:"üí≠-domain-layer",children:[]},{level:3,title:"üóÑ Infrastructure Layer",slug:"üóÑ-infrastructure-layer",children:[]}]},{level:2,title:"üíâ Dependency Injection",slug:"üíâ-dependency-injection",children:[]},{level:2,title:"üìÇ Directory Structure",slug:"üìÇ-directory-structure",children:[]},{level:2,title:"üèõ Architecture Best Practices",slug:"üèõ-architecture-best-practices",children:[]}],filePathRelative:"flutter/architecture.md",git:{updatedTime:1651654358e3,contributors:[{name:"Sam Turrell",email:"sam.turrell@netsells.co.uk",commits:1}]}}},1553:(e,n,t)=>{e.exports=t.p+"assets/img/Flutter-Architecture.34472c33.png"}}]);