"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7177],{7269:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var e=a(6252);const t=(0,e.uE)('<h1 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling" aria-hidden="true">#</a> Error Handling</h1><p>Often, error handling amounts to catching exceptions in the UI and displaying the message. This works, but has some important drawbacks:</p><ul><li>Relies on the developer building the UI understanding which exceptions are possible, and which to handle.</li><li>Couples the implementation of a data source to the implementation of the UI, reducing the maintainability of the project.</li><li>Encourages developers to simply use <code>catch (e: Exception)</code>, which is bad practice</li></ul><h2 id="effective-error-handling" tabindex="-1"><a class="header-anchor" href="#effective-error-handling" aria-hidden="true">#</a> Effective Error Handling</h2><p>An effective error handling solution solves all of these problems by:</p><ul><li>Catching relevant exceptions early and propagating them to the UI in a way that is not specific to the data source implementation</li><li>Not catching unexpected exceptions <ul><li><em>While this seems counter-intuitive, unexpected exceptions indicate something has gone horribly wrong, and often the safest thing to do here is to just kill the process</em></li></ul></li><li>Make it easier for developers to handle failures than to ignore them</li></ul><p>To this end, when handling errors, we use two concepts: <code>Either</code> and <code>Failure</code>.</p><h3 id="failure" tabindex="-1"><a class="header-anchor" href="#failure" aria-hidden="true">#</a> Failure</h3><p>A <code>Failure</code> should represent an <strong>expected</strong> error. An example implementation of a <code>Failure</code> in Kotlin is:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token comment">/**\n * Represents an expected error.\n * @property message A human-readable error message which can be displayed in the UI\n * @property code An optional unique code which can be used to identify this type of error  \n */</span>\n<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Failure</span><span class="token punctuation">(</span><span class="token keyword">val</span> message<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> code<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="either" tabindex="-1"><a class="header-anchor" href="#either" aria-hidden="true">#</a> Either</h3><p><code>Either</code> is a concept from functional programming. It&#39;s a construct which allows a value or variable to be one of two types.</p>',12),p=(0,e.Uk)("A great implementation of "),o=(0,e._)("code",null,"Either",-1),c=(0,e.Uk)(" can be found in the Arrow library for Kotlin. Instructions for adding this library to your project are "),l={href:"https://arrow-kt.io/docs/0.10/quickstart/setup/",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("here"),i=(0,e.Uk)("."),u=(0,e.uE)('<p>An example of <code>Either</code> in practice:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">var</span> either<span class="token operator">:</span> Either<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> int<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">Left</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>\neither <span class="token operator">=</span> <span class="token function">Right</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="bringing-failure-and-either-together-to-handle-errors" tabindex="-1"><a class="header-anchor" href="#bringing-failure-and-either-together-to-handle-errors" aria-hidden="true">#</a> Bringing Failure and Either together to handle errors</h3><p>Consider the following function:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>ArrayIndexOutOfBoundsException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">fun</span> List<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">getAt</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>When calling this function, we could wrap the call site in a <code>try</code>/<code>catch</code> block and explicitly handle <code>ArrayIndexOutOfBoundsException</code>:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> item <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// throws</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> ArrayIndexOutOfBoundsException<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do some error handling</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>There are a few issues with this implementation:</p><ul><li>It relies on the developer using the function knowing that it could throw that type of exception</li><li>It relies on the developer using the function remembering to catch the exception</li><li>It relies on the developer writing an appropriate error message every time the exception occurs. If the function is used in multiple places this can introduce inconsistency</li><li>It ties the use of the function to its implementation. If a new implementation for the function is created which could throw a different type of exception, all call sites will have to be updated to handle the new exception type</li></ul><p>As an alternative, consider this implementation of the function:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">fun</span> List<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">getAt</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Either<span class="token operator">&lt;</span>Failure<span class="token punctuation">,</span> Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">Right</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> ArrayIndexOutOfBoundsException<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">Left</span><span class="token punctuation">(</span><span class="token function">Failure</span><span class="token punctuation">(</span><span class="token string">&quot;There isn&#39;t anything at index <span class="token interpolation"><span class="token delimiter variable">${</span>index<span class="token delimiter variable">}</span></span>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Then, then call site looks like this:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token keyword">val</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n\nresult<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span>\n    ifLeft <span class="token operator">=</span> <span class="token punctuation">{</span> f<span class="token operator">:</span> Failure\n        <span class="token comment">// Handle failure</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    ifRight <span class="token operator">=</span> <span class="token punctuation">{</span> item<span class="token operator">:</span> Int\n        <span class="token comment">// Handle success</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',13),k=(0,e.Uk)("For more documentation on the "),d=(0,e._)("code",null,"Either",-1),h=(0,e.Uk)(" class, see the "),b={href:"https://arrow-kt.io/docs/0.10/apidocs/arrow-core-data/arrow.core/-either/index.html",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("Arrow Documentation"),g=(0,e.Uk)("."),f=(0,e.uE)('<p>The advantages of this approach are:</p><ul><li>Developers calling the function are alerted to the fact that it could return a <code>Failure</code>, and are therefore more likely to handle it</li><li>The same error message is provided every time the <code>ArrayIndexOutOfBoundsException</code> occurs, increasing consistency</li><li>Removes the coupling between the function&#39;s implementation and its call sites, allowing the implementation to change (and possibly handle different exceptions) without the call sites being modified.</li></ul><h2 id="in-a-clean-architecture-project" tabindex="-1"><a class="header-anchor" href="#in-a-clean-architecture-project" aria-hidden="true">#</a> In a Clean Architecture Project</h2><p>A datasource using Retrofit has the potential to return either a <code>Response</code>, which may be a successful or unsuccessful response, or throw an <code>IOException</code>.</p><p>When calling a Retrofit data source in a <code>Repository</code> implementation, the methods should return <code>Either&lt;Failure, T&gt;</code>, where <code>T</code> is the type of a successful response.</p><p>In the event of an <code>IOException</code> or an unsuccessful response, the repository method should return <code>Left&lt;Failure&gt;</code>. Otherwise, return <code>Right&lt;T&gt;</code>.</p><p>For example, here&#39;s a data source:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">interface</span> NumberTriviaDataSource <span class="token punctuation">{</span>\n    <span class="token annotation builtin">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;random&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">getRandomNumberTrivia</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> NumberTrivia\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>And here&#39;s a repository implementation that uses the data source:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">DefaultNumberTriviaRepository</span><span class="token punctuation">(</span>\n    <span class="token keyword">private</span> <span class="token keyword">val</span> dataSource<span class="token operator">:</span> NumberTriviaDataSource\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">getRandomNumberTrivia</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> Either<span class="token operator">&lt;</span>Failure<span class="token punctuation">,</span> NumberTrivia<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token function">Right</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getRandomNumberTrivia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> HttpException<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Unsuccessful response</span>\n            <span class="token function">Left</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Other network-related exception</span>\n            <span class="token function">Left</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>localizedMessage<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>It may be useful to add a utility function to your project so you can avoid having to write this out every time.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token comment">/**\n * Attempts to run the [block] and return [Right] with the result.\n *\n * Returns [Left] if [block] throws an [HttpException] or a [IOException].\n */</span>\n<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">ioSafe</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token keyword">suspend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> T<span class="token punctuation">)</span><span class="token operator">:</span> Either<span class="token operator">&lt;</span>Failure<span class="token punctuation">,</span> T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token function">Right</span><span class="token punctuation">(</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> HttpException<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">Left</span><span class="token punctuation">(</span><span class="token function">Failure</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">Left</span><span class="token punctuation">(</span><span class="token function">Failure</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>localizedMessage<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Then the repository becomes:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">DefaultNumberTriviaRepository</span><span class="token punctuation">(</span>\n    <span class="token keyword">private</span> <span class="token keyword">val</span> dataSource<span class="token operator">:</span> NumberTriviaDataSource\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">getRandomNumberTrivia</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> Either<span class="token operator">&lt;</span>Failure<span class="token punctuation">,</span> NumberTrivia<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> ioSafe <span class="token punctuation">{</span>\n            dataSource<span class="token punctuation">.</span><span class="token function">getRandomNumberTrivia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',14),v={},y=(0,a(3744).Z)(v,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[p,o,c,(0,e._)("a",l,[r,(0,e.Wm)(a)]),i]),u,(0,e._)("p",null,[(0,e._)("em",null,[k,d,h,(0,e._)("a",b,[m,(0,e.Wm)(a)]),g])]),f],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}},1669:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-757f0c54",path:"/android/error-handling.html",title:"Error Handling",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Effective Error Handling",slug:"effective-error-handling",children:[{level:3,title:"Failure",slug:"failure",children:[]},{level:3,title:"Either",slug:"either",children:[]},{level:3,title:"Bringing Failure and Either together to handle errors",slug:"bringing-failure-and-either-together-to-handle-errors",children:[]}]},{level:2,title:"In a Clean Architecture Project",slug:"in-a-clean-architecture-project",children:[]}],filePathRelative:"android/error-handling.md",git:{updatedTime:1634895798e3,contributors:[{name:"Sam Turrell",email:"sam.turrell@netsells.co.uk",commits:1}]}}}}]);