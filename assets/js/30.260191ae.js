(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{231:function(e,t,s){"use strict";s.r(t);var a=s(0),n=Object(a.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"general-guidelines"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#general-guidelines","aria-hidden":"true"}},[e._v("#")]),e._v(" General Guidelines")]),e._v(" "),s("p",[e._v("All points here here are general guidelines only - break them if you have a good reason (but only if you have a good reason).")]),e._v(" "),s("h2",{attrs:{id:"ef-and-db"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ef-and-db","aria-hidden":"true"}},[e._v("#")]),e._v(" EF and DB")]),e._v(" "),s("p",[e._v("DB interaction should be through entity framework - only use custom sql / stored procedure etc. when absolutely necessary.")]),e._v(" "),s("p",[e._v("Use of automapper projections is strongly encouraged.")]),e._v(" "),s("p",[e._v("Db interaction should be contained in repository classes")]),e._v(" "),s("p",[e._v("Primary db interactions should be via ICommonRepository or equivalent.")]),e._v(" "),s("p",[e._v("Filtering should be done primarily through IEntityFilter implementations. Avoid complex filters - use IMultiPartFilter when possible.")]),e._v(" "),s("p",[e._v("Ordering should be done primarily through IEntity order implementations.")]),e._v(" "),s("p",[e._v("Avoid EF includes where possible - nothing outside the repository method which is accessing the db and the service directly cosuming it should assume any navigation properties are populated.")]),e._v(" "),s("h2",{attrs:{id:"automapper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#automapper","aria-hidden":"true"}},[e._v("#")]),e._v(" Automapper")]),e._v(" "),s("p",[e._v("Automapper should be used for simple type mappings.")]),e._v(" "),s("p",[e._v("Mappings from db entities to model should take care to only use simple mappings so they can be executed in SQL by EF.")]),e._v(" "),s("p",[e._v("Do not put complex logic in automapper profiles - if you need a custom resolver or any services injected then use an explicit mapping service.")]),e._v(" "),s("h2",{attrs:{id:"controllers-and-services"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#controllers-and-services","aria-hidden":"true"}},[e._v("#")]),e._v(" Controllers and services")]),e._v(" "),s("p",[e._v("Business logic should be kept out of controllers. Controllers should only contain logic for interfacing between request and service actions.")]),e._v(" "),s("p",[e._v("Entity classes should not be used as request / result models - add a model with a mapping.")]),e._v(" "),s("h2",{attrs:{id:"async"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async","aria-hidden":"true"}},[e._v("#")]),e._v(" Async")]),e._v(" "),s("p",[e._v("Where possible, all interactions with external services / dbs / filesystems etc. should be async.")]),e._v(" "),s("p",[e._v("Avoid using Task.Result or equivalents - use async / await.")]),e._v(" "),s("h2",{attrs:{id:"request-validation-and-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#request-validation-and-exceptions","aria-hidden":"true"}},[e._v("#")]),e._v(" Request validation and exceptions")]),e._v(" "),s("p",[e._v("Where possible requests should be validated.")]),e._v(" "),s("p",[e._v("Use Fluent Validation.")]),e._v(" "),s("p",[e._v("Where practical validation should be separated from action logic and performed before any other actions.")]),e._v(" "),s("p",[e._v("Any caught exceptions should be logged. Don't swallow exceptions.")]),e._v(" "),s("p",[e._v("Don't add try catch blocks which then throw a generic exception e.g.:")]),e._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("try")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//Some stuff")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("catch")]),e._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//Doing this loses the stack trace and all information about the actual error.")]),e._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throw")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[e._v("SomethingWentWrongException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("h2",{attrs:{id:"services-and-dependency-injection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#services-and-dependency-injection","aria-hidden":"true"}},[e._v("#")]),e._v(" Services and dependency Injection")]),e._v(" "),s("p",[e._v("Code should be logically divided into services, connected via interfaces using dependency injection.")]),e._v(" "),s("p",[e._v("All services should have a single purpose.")]),e._v(" "),s("p",[e._v("Services should usually only have a few external methods - services with lost of methods generally have too many responsibilities.")]),e._v(" "),s("p",[e._v("Each logical code area should have its own service registration extension.")]),e._v(" "),s("p",[e._v("Services should generally be registered as either scoped or transient. Be extremely careful registering anything as static scope.")]),e._v(" "),s("h2",{attrs:{id:"external-interactions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#external-interactions","aria-hidden":"true"}},[e._v("#")]),e._v(" External interactions")]),e._v(" "),s("p",[e._v("Interaction with external API or other resources should be implemented behind a facade service. It's usually impractical to unit test these facade services.")]),e._v(" "),s("h2",{attrs:{id:"unit-tests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unit-tests","aria-hidden":"true"}},[e._v("#")]),e._v(" Unit Tests")]),e._v(" "),s("p",[e._v("Where practical, all code should be unit tested.")]),e._v(" "),s("p",[e._v("Unit test should be in their own project.")]),e._v(" "),s("p",[e._v("Each service should have a folder for its unit tests, named after the class e.g. MyClassTests.")]),e._v(" "),s("p",[e._v("Each public method in a service should have it's own test file named for the method e.g. GetTheDataTests.")]),e._v(" "),s("p",[e._v("Services with multiple public methods should have a test base class dealing with initialisation etc.")]),e._v(" "),s("p",[e._v("Unit test for filters and orders do not need a folder - they can have a single file named for the filter e.g. MyFilterTests.")]),e._v(" "),s("p",[e._v("Use Moq and FluentAssertions.")])])},[],!1,null,null,null);t.default=n.exports}}]);