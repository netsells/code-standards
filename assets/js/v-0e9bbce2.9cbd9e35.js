"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8798],{2789:(e,t,n)=>{n.r(t),n.d(t,{default:()=>j});var r=n(6252);const o=(0,r._)("h1",{id:"testing",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#testing","aria-hidden":"true"},"#"),(0,r.Uk)(" Testing")],-1),s=(0,r.Uk)("The "),i=(0,r.Uk)("Clean Architecture"),a=(0,r.Uk)(" makes the project highly testable. Consider using a test-driven development workflow when implementing features."),l=(0,r.Uk)("You'll probably want to make use of "),d={href:"https://developer.android.com/topic/libraries/testing-support-library",target:"_blank",rel:"noopener noreferrer"},u=(0,r.Uk)("AndroidX Test"),c=(0,r.Uk)(", "),h={href:"http://robolectric.org/",target:"_blank",rel:"noopener noreferrer"},m=(0,r.Uk)("Robolectric"),g=(0,r.Uk)(", and "),p={href:"https://site.mockito.org/",target:"_blank",rel:"noopener noreferrer"},k=(0,r.Uk)("Mockito"),w=(0,r.Uk)("."),f=(0,r.uE)('<h2 id="types-of-test" tabindex="-1"><a class="header-anchor" href="#types-of-test" aria-hidden="true">#</a> Types of Test</h2><ul><li><p><em>Local tests</em> can be run on any machine with a JVM, including your computer and a continuous integration server</p></li><li><p><em>Instrumentation tests</em> must be run on a real or emulated Android device</p></li><li><p><em>Unit tests</em> test individual classes in isolation, using mocked versions of dependencies</p></li><li><p><em>Integration tests</em> test the entire system as a whole using real dependencies</p></li></ul><h2 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements" aria-hidden="true">#</a> Requirements</h2><p>When reviewing pull requests, please follow these requirements.</p><p><strong>Pull Requests must not be merged with failing tests.</strong></p><h3 id="new-projects" tabindex="-1"><a class="header-anchor" href="#new-projects" aria-hidden="true">#</a> New Projects</h3><ul><li><strong>MUST</strong> include <em>local unit tests</em> for everything in the <code>data</code> and <code>domain</code> layers, as well as state management components such as <code>ViewModel</code>s.</li><li><strong>SHOULD</strong> include <em>local unit tests</em> for Fragments and Activities, provided the tests aren&#39;t too time-consuming to write. <ul><li>You <strong>MUST</strong> use Robolectric when writing these tests, so that emulators/devices are not required.</li></ul></li><li><strong>CONSIDER</strong> including <em>local integration tests</em> which test the entire feature against mocked external dependencies (e.g. a mocked web server). <ul><li>Use your judgement to decide whether this is worth the time you might spend.</li></ul></li><li><strong>SHOULD NOT</strong> include <em>instrumented tests</em>. These have limited usefulness and take a very long time to write. <strong>PREFER</strong> manual integration testing.</li></ul><h3 id="legacy-projects" tabindex="-1"><a class="header-anchor" href="#legacy-projects" aria-hidden="true">#</a> Legacy Projects</h3><ul><li><strong>CONSIDER</strong> include unit tests for new functionality as above, wherever possible <ul><li>Make a judgement call here. If the codebase is super untestable, it may not be worth the hassle.</li></ul></li></ul><h2 id="how-do-i-know-what-to-test" tabindex="-1"><a class="header-anchor" href="#how-do-i-know-what-to-test" aria-hidden="true">#</a> How do I know what to test?</h2>',10),b=(0,r.Uk)("As mentioned above, the "),y=(0,r.Uk)("Clean Architecture"),v=(0,r.Uk)(" makes the project highly testable. It's pretty clear that you can test each component of the Clean Architecture, and what you should be testing."),U=(0,r._)("p",null,[(0,r.Uk)("If you're unsure, think about the concept of "),(0,r._)("strong",null,"mutation testing"),(0,r.Uk)(". If you deliberately introduce a random bug, like removing a line of code or replacing a "),(0,r._)("code",null,"<"),(0,r.Uk)(" with a "),(0,r._)("code",null,">"),(0,r.Uk)(", will your test fail? If not, it's not doing the job it's designed for, so you should update the test to catch that bug. Remember, "),(0,r._)("strong",null,"tests exist to catch mistakes made by developers"),(0,r.Uk)(", so make sure you account for every possible mistake.")],-1),_={},j=(0,n(3744).Z)(_,[["render",function(e,t){const n=(0,r.up)("RouterLink"),_=(0,r.up)("OutboundLink");return(0,r.wg)(),(0,r.iD)(r.HY,null,[o,(0,r._)("p",null,[s,(0,r.Wm)(n,{to:"/android/clean-architecture.html"},{default:(0,r.w5)((()=>[i])),_:1}),a]),(0,r._)("p",null,[l,(0,r._)("a",d,[u,(0,r.Wm)(_)]),c,(0,r._)("a",h,[m,(0,r.Wm)(_)]),g,(0,r._)("a",p,[k,(0,r.Wm)(_)]),w]),f,(0,r._)("p",null,[b,(0,r.Wm)(n,{to:"/android/clean-architecture.html"},{default:(0,r.w5)((()=>[y])),_:1}),v]),U],64)}]])},3744:(e,t)=>{t.Z=(e,t)=>{for(const[n,r]of t)e[n]=r;return e}},9969:(e,t,n)=>{n.r(t),n.d(t,{data:()=>r});const r={key:"v-0e9bbce2",path:"/android/testing.html",title:"Testing",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Types of Test",slug:"types-of-test",children:[]},{level:2,title:"Requirements",slug:"requirements",children:[{level:3,title:"New Projects",slug:"new-projects",children:[]},{level:3,title:"Legacy Projects",slug:"legacy-projects",children:[]}]},{level:2,title:"How do I know what to test?",slug:"how-do-i-know-what-to-test",children:[]}],filePathRelative:"android/testing.md",git:{updatedTime:1663059318e3,contributors:[{name:"Sam Turrell",email:"sam.turrell@netsells.co.uk",commits:1}]}}}}]);