(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{213:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"clean-architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clean-architecture","aria-hidden":"true"}},[e._v("#")]),e._v(" Clean Architecture")]),e._v(" "),a("p",[e._v("Android projects should use the Clean Architecture to ensure maintainability and testability. In other words, the project should be split into "),a("strong",[e._v("features")]),e._v(" with each feature containing a "),a("strong",[e._v("data")]),e._v(" layer, a "),a("strong",[e._v("domain")]),e._v(" layer, and a "),a("strong",[e._v("presentation")]),e._v(" layer. Additionally, a "),a("code",[e._v("core")]),e._v(" directory at the root of the source code directory can hold project-wide code where appropriate.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("+--- src\n    +--- core\n    +--- features\n        +--- my_feature\n            +--- data\n                +--- models\n                    ** Classes which extend entities and provide additional conversion code **\n                +--- datasources\n                    ** Code for retrieving data from external sources **\n                +--- repositories\n                    ** Implementations of the repository interfaces from the domain layer **\n            +--- domain\n                +--- entities\n                    ** Simple data classes with no ties to data or presentation layers **\n                +--- repositories\n                    ** Repository interfaces which will be implemented in the data layer **\n                +--- usecases\n                    ** Use cases, for use by the presentation layer **\n            +--- presentation\n                ** Activities, fragments, adapters, and views **\n")])])]),a("p",[a("em",[e._v("Consider splitting your project into an "),a("code",[e._v("app")]),e._v(" module, containing the data and presentation layers, and a "),a("code",[e._v("core")]),e._v(" module containing the domain layer.")])]),e._v(" "),a("h2",{attrs:{id:"domain-layer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#domain-layer","aria-hidden":"true"}},[e._v("#")]),e._v(" Domain Layer")]),e._v(" "),a("p",[e._v("When writing a feature it's sensible to write the domain layer first.")]),e._v(" "),a("p",[e._v("Start with "),a("strong",[e._v("entities")]),e._v(", which should be simple Kotlin data classes representing the data this feature is working with.")]),e._v(" "),a("p",[e._v("Then create "),a("strong",[e._v("repositories")]),e._v(", which should be "),a("strong",[e._v("interfaces")]),e._v(" or "),a("strong",[e._v("abstract classes")]),e._v(" defining the data transactions supported by this feature.")]),e._v(" "),a("p",[e._v("Then create "),a("strong",[e._v("use cases")]),e._v(", which are designed to be called by the presentation layer. These should call the "),a("strong",[e._v("repositories")]),e._v(" and return data as the presentation layer requires it. In other words, use cases are delegates for the presentation layer's business logic.")]),e._v(" "),a("h2",{attrs:{id:"data-layer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-layer","aria-hidden":"true"}},[e._v("#")]),e._v(" Data layer")]),e._v(" "),a("p",[e._v("The data layer implements the repositories defined in the domain layer. This is done by implementing "),a("strong",[e._v("data sources")]),e._v(", which fetch data from remote locations like databases and APIs. This data is then passed to the repository implementatations in the form of "),a("strong",[e._v("models")]),e._v(", which extend the "),a("strong",[e._v("entities")]),e._v(" defined in the domain layer.")]),e._v(" "),a("h2",{attrs:{id:"presentation-layer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#presentation-layer","aria-hidden":"true"}},[e._v("#")]),e._v(" Presentation layer")]),e._v(" "),a("p",[e._v("This layer contains all presentation-related code including activities, fragments, viewmodels, adapters etc. It should use "),a("strong",[e._v("usecases")]),e._v(" to interact with the domain layer.")]),e._v(" "),a("p",[e._v("The presentation layer should be built using "),a("router-link",{attrs:{to:"/android/mvvm.html"}},[e._v("MVVM")]),e._v(".")],1)])},[],!1,null,null,null);t.default=s.exports}}]);