"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3476],{7689:(e,t,o)=>{o.r(t),o.d(t,{default:()=>_});var i=o(6252);const s=(0,i.uE)('<h1 id="testing-flutter-apps" tabindex="-1"><a class="header-anchor" href="#testing-flutter-apps" aria-hidden="true">#</a> Testing Flutter Apps</h1><p>Comprehensive automated tests are a crucial component of a healthy codebase. Not only do they allow behaviour to be continuously verified as changes are made to a project; they also encourage good development habits, boost productivity, and serve as living documentation for the intended functionality of your code.</p><p>Thankfully, Flutter&#39;s testing APIs make it easy to write a comprehensive test suite.</p><p><strong>Summary</strong></p><ul><li>Use a &quot;given-when-then&quot; structure for tests</li><li>Aim for 100% test coverage</li><li>Bake testing into your development workflow</li><li>Review tests in PRs carefully</li><li>Don&#39;t skip tests to save time</li></ul><h2 id="🧪-formula-for-a-good-test" tabindex="-1"><a class="header-anchor" href="#🧪-formula-for-a-good-test" aria-hidden="true">#</a> 🧪 Formula for a good test</h2><p>A good test has 3 steps:</p><ol><li>Set up</li><li>Act</li><li>Assert</li></ol><p>This can also be thought of as a &quot;given-when-then&quot; structure. For example:</p><blockquote><p><strong>Given</strong> the Home screen is displayed, <strong>when</strong> I tap the Floating Action Button, <strong>then</strong> the Add Todo widget should be displayed.</p></blockquote><p>Here are some signs you might be writing a bad test:</p><ul><li>The goal of the test is unclear</li><li>The test has multiple reasons to fail</li><li>The test contains artificial delays</li><li>The test has hidden or internal dependencies</li><li>There are no assertions, expectations, of verifications</li><li>The order in which a test is executed affects its result</li></ul><h2 id="💯-aim-for-100-test-coverage" tabindex="-1"><a class="header-anchor" href="#💯-aim-for-100-test-coverage" aria-hidden="true">#</a> 💯 Aim for 100% test coverage</h2><p>Test coverage is a fairly blunt measure of how effective your tests are, but it&#39;s the best one we have. Increasing test coverage can never be a bad thing, and the higher the coverage, the more confident we can be in our code.</p><p>We expect 100% test coverage in our new projects. Any less than 100% coverage makes a test suite limited in its usefulness; with 100% coverage you can be extremely confident in the continuous correctness of the codebase as changes are made and new features added.</p><p><em>Note: generated code is excluded from our test coverage measurements; only handwritten code is measured.</em></p>',16),r=(0,i.Uk)("We use "),a={href:"https://coveralls.io/",target:"_blank",rel:"noopener noreferrer"},n=(0,i.Uk)("Coveralls"),l=(0,i.Uk)(" to keep track of test coverage throughout the lifetime of a project. Each time you push code or open a pull request, a coverage report will be sent to Coveralls and a summary will be added to your pull request."),u=(0,i.Uk)("Additionally, we use "),d={href:"https://github.com/VeryGoodOpenSource/very_good_coverage",target:"_blank",rel:"noopener noreferrer"},h=(0,i.Uk)("Very Good Coverage"),c=(0,i.Uk)(" to block pull requests if coverage falls below 95%. The 5% flexibility is there to ensure that time-sensitive and critical changes aren't blocked as a result of test coverage requirements. In day-to-day development, all code should be covered or explicitly ignored."),f=(0,i._)("h4",{id:"tips-for-100-coverage",tabindex:"-1"},[(0,i._)("a",{class:"header-anchor",href:"#tips-for-100-coverage","aria-hidden":"true"},"#"),(0,i.Uk)(" Tips for 100% coverage")],-1),g=(0,i._)("li",null,"If you're struggling, bring in another developer to help",-1),p=(0,i.Uk)("Use "),m={href:"https://api.flutter.dev/flutter/flutter_test/matchesGoldenFile.html",target:"_blank",rel:"noopener noreferrer"},v=(0,i.Uk)("golden tests"),y=(0,i.Uk)(" as a quick way of verifying the visual design and layout of a widget"),w=(0,i._)("li",null,"Use feature-level integration tests to cover lines which are harder to cover with just unit tests",-1),b=(0,i._)("li",null,"Don't slowly build up to 100% at the start of the project; the codebase should be 100% covered from the very first commit",-1),k=(0,i._)("li",null,[(0,i.Uk)("For code which genuinely cannot be tested (e.g. packages which use top-level or static methods, or platform channels), wrap the functionality in a mockable class and add this comment to the top of the file: "),(0,i._)("code",null,"// coverage:ignore-file"),(0,i.Uk)(". This excludes the file from being included in coverage measurements. "),(0,i._)("strong",null,"Watch out for abuses of this functionality when reviewing PRs!")],-1),T=(0,i.uE)('<h2 id="🧁-bake-testing-into-your-development-workflow" tabindex="-1"><a class="header-anchor" href="#🧁-bake-testing-into-your-development-workflow" aria-hidden="true">#</a> 🧁 Bake testing into your development workflow</h2><p>Tests are easiest to write when the functionality under test is already in your mind. It&#39;s much more taxing to go back and write tests for a bunch of functionality you wrote a few days or weeks ago.</p><p>To that end, bake testing into your development workflow. You could use a framework like Test-driven Development (TDD), or simply write tests for each class immediately after you&#39;ve written the production code. Do whatever works for you.</p><p>In any case, when it&#39;s time to open your Pull Request you should ensure you&#39;re meeting the requirement for 100% coverage, and that all tests are passing.</p><h2 id="🔬-review-tests-in-prs-carefully" tabindex="-1"><a class="header-anchor" href="#🔬-review-tests-in-prs-carefully" aria-hidden="true">#</a> 🔬 Review tests in PRs carefully</h2><p>Even with 100% line coverage, it&#39;s extremely important that tests are reviewed manually during the code review process. When reviewing tests, look out for these red flags:</p><ul><li>Tests with no assertions, expectations, or verifications</li><li>Tests which have obviously been written just to satisfy the coverage requirement</li><li>Not all logical branches are tested (e.g. only the right-hand-side of a ternary operator)</li><li>Only testing the &quot;happy path&quot;</li><li>Abuses of the <code>// coverage:ignore-file</code> rule</li></ul><h2 id="⌛-don-t-skip-tests-to-save-time" tabindex="-1"><a class="header-anchor" href="#⌛-don-t-skip-tests-to-save-time" aria-hidden="true">#</a> ⌛ Don&#39;t skip tests to save time</h2><p>Skipping tests saves you time today, but this time saving doesn&#39;t come for free. You exchange this time for technical debt.</p><p>Fundamentally, an untested codebase cannot scale efficiently, and will become more and more difficult to work with over time. The time you save now by not writing a test will need to be paid back - with significant interest - later down the line.</p><p>Be firm on this principle when working with non-technical staff. Project timelines should and must include sufficient time for developers to write high-quality, well-tested code, and any estimates you give must include time for adding/updating tests. There is no such thing as &quot;pushing to get this over the line&quot;; writing good code takes as long as it needs to.</p>',11),x={},_=(0,o(3744).Z)(x,[["render",function(e,t){const o=(0,i.up)("OutboundLink");return(0,i.wg)(),(0,i.iD)(i.HY,null,[s,(0,i._)("p",null,[r,(0,i._)("a",a,[n,(0,i.Wm)(o)]),l]),(0,i._)("p",null,[u,(0,i._)("a",d,[h,(0,i.Wm)(o)]),c]),f,(0,i._)("ul",null,[g,(0,i._)("li",null,[p,(0,i._)("a",m,[v,(0,i.Wm)(o)]),y]),w,b,k]),T],64)}]])},3744:(e,t)=>{t.Z=(e,t)=>{for(const[o,i]of t)e[o]=i;return e}},3415:(e,t,o)=>{o.r(t),o.d(t,{data:()=>i});const i={key:"v-03009c55",path:"/flutter/testing.html",title:"Testing Flutter Apps",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"🧪 Formula for a good test",slug:"🧪-formula-for-a-good-test",children:[]},{level:2,title:"💯 Aim for 100% test coverage",slug:"💯-aim-for-100-test-coverage",children:[]},{level:2,title:"🧁 Bake testing into your development workflow",slug:"🧁-bake-testing-into-your-development-workflow",children:[]},{level:2,title:"🔬 Review tests in PRs carefully",slug:"🔬-review-tests-in-prs-carefully",children:[]},{level:2,title:"⌛ Don't skip tests to save time",slug:"⌛-don-t-skip-tests-to-save-time",children:[]}],filePathRelative:"flutter/testing.md",git:{updatedTime:1632993005e3,contributors:[{name:"Sam Turrell",email:"sam.turrell@netsells.co.uk",commits:1}]}}}}]);