"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3476],{1368:(e,t,i)=>{i.r(t),i.d(t,{default:()=>a});const o=(0,i(6252).uE)('<h1 id="testing-flutter-apps" tabindex="-1"><a class="header-anchor" href="#testing-flutter-apps" aria-hidden="true">#</a> Testing Flutter Apps</h1><p>Comprehensive automated tests are a crucial component of a healthy codebase. Not only do they allow behaviour to be continuously verified as changes are made to a project; they also encourage good development habits, boost productivity, and serve as living documentation for the intended functionality of your code.</p><p>Thankfully, Flutter&#39;s testing APIs make it easy to write a comprehensive test suite.</p><p><strong>Summary</strong></p><ul><li>Use a &quot;given-when-then&quot; structure for tests</li><li>Aim for 100% test coverage</li><li>Bake testing into your development workflow</li><li>Review tests in PRs carefully</li><li>Don&#39;t skip tests to save time</li></ul><h2 id="🧪-formula-for-a-good-test" tabindex="-1"><a class="header-anchor" href="#🧪-formula-for-a-good-test" aria-hidden="true">#</a> 🧪 Formula for a good test</h2><p>A good test has 3 steps:</p><ol><li>Set up</li><li>Act</li><li>Assert</li></ol><p>This can also be thought of as a &quot;given-when-then&quot; structure. For example:</p><blockquote><p><strong>Given</strong> the Home screen is displayed, <strong>when</strong> I tap the Floating Action Button, <strong>then</strong> the Add Todo widget should be displayed.</p></blockquote><p>Here are some signs you might be writing a bad test:</p><ul><li>The goal of the test is unclear</li><li>The test has multiple reasons to fail</li><li>The test contains artificial delays</li><li>The test has hidden or internal dependencies</li><li>There are no assertions, expectations, of verifications</li><li>The order in which a test is executed affects its result</li></ul><h2 id="💯-aim-for-100-test-coverage" tabindex="-1"><a class="header-anchor" href="#💯-aim-for-100-test-coverage" aria-hidden="true">#</a> 💯 Aim for 100% test coverage</h2><p>Test coverage is a fairly blunt measure of how effective your tests are, but it&#39;s the best one we have. Increasing test coverage can never be a bad thing, and the higher the coverage, the more confident we can be in our code.</p><h4 id="tips-for-higher-test-coverage-coverage" tabindex="-1"><a class="header-anchor" href="#tips-for-higher-test-coverage-coverage" aria-hidden="true">#</a> Tips for higher test coverage coverage</h4><ul><li>If you&#39;re struggling, bring in another developer to help</li><li><strong>Don&#39;t test individual classes!</strong> This is a common trap developers fall into. Test at the widget-level using real internal dependencies.</li><li>Only mock external dependecies. Mocking internal dependencies couples your test to the implementation and means that making changes down-the-line is much harder. If you find yourself needing a mock for an internal dependency, consider whether you&#39;re testing at the right level.</li><li>Practice Test-Driven Development, particularly when making changes to existing functionality or fixing bugs. It&#39;s a great way of ensuring tests continue to pass and that edge-cases are covered as they are discovered.</li><li>For code which genuinely cannot be tested (e.g. packages which use top-level or static methods, or platform channels), make use of the <code>// coverage:ignore-*</code> rules. This excludes the file from being included in coverage measurements. <strong>Watch out for abuses of this functionality when reviewing PRs!</strong><ul><li><code>// coverage:ignore-file</code></li><li><code>// coverage:ignore-start</code> and <code>// coverage:ignore-end</code></li><li><code>// coverage:ignore-line</code></li></ul></li></ul><h2 id="🧁-bake-testing-into-your-development-workflow" tabindex="-1"><a class="header-anchor" href="#🧁-bake-testing-into-your-development-workflow" aria-hidden="true">#</a> 🧁 Bake testing into your development workflow</h2><p>Tests are easiest to write when the functionality under test is already in your mind. It&#39;s much more taxing to go back and write tests for a bunch of functionality you wrote a few days or weeks ago.</p><p>To that end, bake testing into your development workflow. You could use a framework like Test-driven Development (TDD), or simply write tests for each class immediately after you&#39;ve written the production code. Do whatever works for you.</p><h2 id="🔬-review-tests-in-prs-carefully" tabindex="-1"><a class="header-anchor" href="#🔬-review-tests-in-prs-carefully" aria-hidden="true">#</a> 🔬 Review tests in PRs carefully</h2><p>Even with 100% line coverage, it&#39;s extremely important that tests are reviewed manually during the code review process. When reviewing tests, look out for these red flags:</p><ul><li>Tests with no assertions, expectations, or verifications</li><li>Tests which have obviously been written just to satisfy the coverage requirement</li><li>Not all logical branches are tested (e.g. only the right-hand-side of a ternary operator)</li><li>Only testing the &quot;happy path&quot;</li><li>Abuses of the <code>// coverage:ignore-*</code> rules</li></ul><h2 id="👎-don-t-skip-tests-to-save-time" tabindex="-1"><a class="header-anchor" href="#👎-don-t-skip-tests-to-save-time" aria-hidden="true">#</a> 👎 Don&#39;t skip tests to save time</h2><p>Skipping tests saves you time today, but this time saving doesn&#39;t come for free. You exchange this time for technical debt.</p><p>Fundamentally, an untested codebase cannot scale efficiently, and will become more and more difficult to work with over time. The time you save now by not writing a test will need to be paid back - with significant interest - later down the line.</p><p>Be firm on this principle when working with non-technical staff. Project timelines should and must include sufficient time for developers to write high-quality, well-tested code, and any estimates you give must include time for adding/updating tests. There is no such thing as &quot;pushing to get this over the line&quot;; writing good code takes as long as it needs to.</p>',26),s={},a=(0,i(3744).Z)(s,[["render",function(e,t){return o}]])},3744:(e,t)=>{t.Z=(e,t)=>{for(const[i,o]of t)e[i]=o;return e}},3415:(e,t,i)=>{i.r(t),i.d(t,{data:()=>o});const o={key:"v-03009c55",path:"/flutter/testing.html",title:"Testing Flutter Apps",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"🧪 Formula for a good test",slug:"🧪-formula-for-a-good-test",children:[]},{level:2,title:"💯 Aim for 100% test coverage",slug:"💯-aim-for-100-test-coverage",children:[]},{level:2,title:"🧁 Bake testing into your development workflow",slug:"🧁-bake-testing-into-your-development-workflow",children:[]},{level:2,title:"🔬 Review tests in PRs carefully",slug:"🔬-review-tests-in-prs-carefully",children:[]},{level:2,title:"👎 Don't skip tests to save time",slug:"👎-don-t-skip-tests-to-save-time",children:[]}],filePathRelative:"flutter/testing.md",git:{updatedTime:1660040715e3,contributors:[{name:"Peter Bryant",email:"peter@ptrbrynt.com",commits:1}]}}}}]);