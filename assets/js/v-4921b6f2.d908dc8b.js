"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6555],{4112:(n,e,s)=>{s.r(e),s.d(e,{default:()=>b});var a=s(6252);const t=(0,a.uE)('<h1 id="handling-error" tabindex="-1"><a class="header-anchor" href="#handling-error" aria-hidden="true">#</a> Handling Error</h1><h2 id="principles" tabindex="-1"><a class="header-anchor" href="#principles" aria-hidden="true">#</a> Principles</h2><ul><li>There is a difference between <strong>errors</strong> and <strong>exceptions</strong>. <ul><li><strong>Errors</strong> are things that could happen, but are not considered exceptional e.g. a network error.</li><li><strong>Exceptions</strong> are things that are exceptional e.g. a <code>StackOverflowError</code>. If these happen, a developer has made a mistake.</li></ul></li><li>When <strong>errors</strong> occur, we should fail elegantly in a way that informs the user of the error and suggests a solution.</li><li>When <strong>exceptions</strong> occur, we treat them as bugs which should be fixed.</li><li>When a method could return an error, we should communicate this explicitly in the return type. This encourages developers to handle error cases.</li></ul><h2 id="implementing-error-handling" tabindex="-1"><a class="header-anchor" href="#implementing-error-handling" aria-hidden="true">#</a> Implementing Error Handling</h2>',4),r=(0,a.Uk)("Our preferred method of error handling is to use the "),o=(0,a._)("code",null,"Either<T, U>",-1),l=(0,a.Uk)(" type, provided by the "),p={href:"https://pub.dev/packages/dartz",target:"_blank",rel:"noopener noreferrer"},i=(0,a._)("code",null,"dartz",-1),c=(0,a.Uk)(" package. "),u=(0,a._)("code",null,"T",-1),d=(0,a.Uk)(" is the type of the error, and "),h=(0,a._)("code",null,"U",-1),k=(0,a.Uk)(" is the type of the successful result."),g=(0,a.uE)('<p>Error types may, minimally, be simple <code>String</code>s or <code>int</code>s, but ideally should be <code>Failure</code> classes which encapsulate the details of the error.</p><p><em>Remember that we should only be handling errors we expect to happen, like <code>4xx</code> responses from network requests.</em></p><p>Here&#39;s an example a method which could return a <code>Failure</code> or a <code>String</code>:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token class-name">Either</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Failure</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">nthItem</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">,</span> int n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">&gt;=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Failure</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Index out of bounds.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> items<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',4),m={},b=(0,s(3744).Z)(m,[["render",function(n,e){const s=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[t,(0,a._)("p",null,[r,o,l,(0,a._)("a",p,[i,(0,a.Wm)(s)]),c,u,d,h,k]),g],64)}]])},3744:(n,e)=>{e.Z=(n,e)=>{for(const[s,a]of e)n[s]=a;return n}},5652:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-4921b6f2",path:"/flutter/handling-errors.html",title:"Handling Error",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Principles",slug:"principles",children:[]},{level:2,title:"Implementing Error Handling",slug:"implementing-error-handling",children:[]}],filePathRelative:"flutter/handling-errors.md",git:{updatedTime:1657102776e3,contributors:[{name:"Sam Turrell",email:"sam.turrell@netsells.co.uk",commits:1}]}}}}]);