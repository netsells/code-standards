"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2121],{2386:(e,n,s)=>{s.r(n),s.d(n,{default:()=>i});const a=(0,s(6252).uE)('<h1 id="general-guidelines" tabindex="-1"><a class="header-anchor" href="#general-guidelines" aria-hidden="true">#</a> General Guidelines</h1><p>All points here here are general guidelines only - break them if you have a good reason (but only if you have a good reason).</p><h2 id="ef-and-db" tabindex="-1"><a class="header-anchor" href="#ef-and-db" aria-hidden="true">#</a> EF and DB</h2><p>DB interaction should be through entity framework - only use custom sql / stored procedure etc. when absolutely necessary.</p><p>Use of automapper projections is strongly encouraged.</p><p>Db interaction should be contained in repository classes</p><p>Primary db interactions should be via ICommonRepository or equivalent.</p><p>Filtering should be done primarily through IEntityFilter implementations. Avoid complex filters - use IMultiPartFilter when possible.</p><p>Ordering should be done primarily through IEntity order implementations.</p><p>Avoid EF includes where possible - nothing outside the repository method which is accessing the db and the service directly cosuming it should assume any navigation properties are populated.</p><h2 id="automapper" tabindex="-1"><a class="header-anchor" href="#automapper" aria-hidden="true">#</a> Automapper</h2><p>Automapper should be used for simple type mappings.</p><p>Mappings from db entities to model should take care to only use simple mappings so they can be executed in SQL by EF.</p><p>Do not put complex logic in automapper profiles - if you need a custom resolver or any services injected then use an explicit mapping service.</p><h2 id="controllers-and-services" tabindex="-1"><a class="header-anchor" href="#controllers-and-services" aria-hidden="true">#</a> Controllers and services</h2><p>Business logic should be kept out of controllers. Controllers should only contain logic for interfacing between request and service actions.</p><p>Entity classes should not be used as request / result models - add a model with a mapping.</p><h2 id="async" tabindex="-1"><a class="header-anchor" href="#async" aria-hidden="true">#</a> Async</h2><p>Where possible, all interactions with external services / dbs / filesystems etc. should be async.</p><p>Avoid using Task.Result or equivalents - use async / await.</p><h2 id="request-validation-and-exceptions" tabindex="-1"><a class="header-anchor" href="#request-validation-and-exceptions" aria-hidden="true">#</a> Request validation and exceptions</h2><p>Where possible requests should be validated.</p><p>Use Fluent Validation.</p><p>Where practical validation should be separated from action logic and performed before any other actions.</p><p>Any caught exceptions should be logged. Don&#39;t swallow exceptions.</p><p>Don&#39;t add try catch blocks which then throw a generic exception e.g.:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">try</span>\n<span class="token punctuation">{</span>\n\t<span class="token comment">//Some stuff</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">catch</span> \n<span class="token punctuation">{</span>\n\t<span class="token comment">//Doing this loses the stack trace and all information about the actual error.</span>\n\t<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SomethingWentWrongException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="services-and-dependency-injection" tabindex="-1"><a class="header-anchor" href="#services-and-dependency-injection" aria-hidden="true">#</a> Services and dependency Injection</h2><p>Code should be logically divided into services, connected via interfaces using dependency injection.</p><p>All services should have a single purpose.</p><p>Services should usually only have a few external methods - services with lost of methods generally have too many responsibilities.</p><p>Each logical code area should have its own service registration extension.</p><p>Services should generally be registered as either scoped or transient. Be extremely careful registering anything as static scope.</p><h2 id="external-interactions" tabindex="-1"><a class="header-anchor" href="#external-interactions" aria-hidden="true">#</a> External interactions</h2><p>Interaction with external API or other resources should be implemented behind a facade service. It&#39;s usually impractical to unit test these facade services.</p><h2 id="unit-tests" tabindex="-1"><a class="header-anchor" href="#unit-tests" aria-hidden="true">#</a> Unit Tests</h2><p>Where practical, all code should be unit tested.</p><p>Unit test should be in their own project.</p><p>Each service should have a folder for its unit tests, named after the class e.g. MyClassTests.</p><p>Each public method in a service should have it&#39;s own test file named for the method e.g. GetTheDataTests.</p><p>Services with multiple public methods should have a test base class dealing with initialisation etc.</p><p>Unit test for filters and orders do not need a folder - they can have a single file named for the filter e.g. MyFilterTests.</p><p>Use Moq and FluentAssertions.</p>',43),t={},i=(0,s(3744).Z)(t,[["render",function(e,n){return a}]])},3744:(e,n)=>{n.Z=(e,n)=>{for(const[s,a]of n)e[s]=a;return e}},2617:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a={key:"v-7428160f",path:"/dotNet/general-guidelines.html",title:"General Guidelines",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"EF and DB",slug:"ef-and-db",children:[]},{level:2,title:"Automapper",slug:"automapper",children:[]},{level:2,title:"Controllers and services",slug:"controllers-and-services",children:[]},{level:2,title:"Async",slug:"async",children:[]},{level:2,title:"Request validation and exceptions",slug:"request-validation-and-exceptions",children:[]},{level:2,title:"Services and dependency Injection",slug:"services-and-dependency-injection",children:[]},{level:2,title:"External interactions",slug:"external-interactions",children:[]},{level:2,title:"Unit Tests",slug:"unit-tests",children:[]}],filePathRelative:"dotNet/general-guidelines.md",git:{updatedTime:1661845645e3,contributors:[{name:"Sam Turrell",email:"sam.turrell@netsells.co.uk",commits:1}]}}}}]);