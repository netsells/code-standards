"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9997],{2818:(e,t,s)=>{s.r(t),s.d(t,{default:()=>P});var n=s(6252);const a=(0,n._)("h1",{id:"unit-testing",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#unit-testing","aria-hidden":"true"},"#"),(0,n.Uk)(" Unit Testing")],-1),o=(0,n._)("p",null,"Our unit test suites are primarily built on top of our storybook stories, as a lot of the setup leg work has already been done within this process, e.g. a default story, a story with a prop set, etc.",-1),i=(0,n.Uk)("Tests should be written using "),r={href:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer"},l=(0,n.Uk)("jest"),u=(0,n.Uk)(" ."),p=(0,n.Uk)("Any non-component tests should follow the same format as below, but interact with "),c={href:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer"},d=(0,n.Uk)("jest"),h=(0,n.Uk)(" directly."),m=(0,n._)("h2",{id:"packages",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#packages","aria-hidden":"true"},"#"),(0,n.Uk)(" Packages")],-1),k=(0,n._)("h3",{id:"vue-storybook-test-utils",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#vue-storybook-test-utils","aria-hidden":"true"},"#"),(0,n.Uk)(" Vue Storybook Test Utils")],-1),b=(0,n.Uk)("Link: "),f={href:"https://github.com/netsells/vue-storybook-test-utils",target:"_blank",rel:"noopener noreferrer"},g=(0,n.Uk)("@netsells/vue-storybook-test-utils"),y=(0,n.Uk)("Most of your test composition and variants (e.g. props, slots) is already setup as part of storybook for use in component-first development and Visual Regression Testing process. It makes little sense to do this setup twice. This module allows you to pass your stories directly to the "),v={href:"https://vue-test-utils.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},w=(0,n.Uk)("@vue/test-utils"),x=(0,n.Uk)(" package and have the wrappers automatically generated with your provided props and story markup."),U=(0,n.uE)('<p>For further details and usage check out the module README.</p><h2 id="format" tabindex="-1"><a class="header-anchor" href="#format" aria-hidden="true">#</a> Format</h2><h3 id="file-convention" tabindex="-1"><a class="header-anchor" href="#file-convention" aria-hidden="true">#</a> File Convention</h3><p>Test files should be suffixed with <code>.spec.js</code> and should match the name of the file being tested. They should be placed alongside the source file in your application. For example, if we were to have a <code>TextInput.vue</code> component, our file structure would look something like so:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>├─ TextInput/\n│  ├─ TextInput.vue\n│  ├─ TextInput.spec.js\n│  └─ TextInput.stories.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Doing so makes it easier to see where the tests are located for each part of your application.</p><h3 id="test-structure" tabindex="-1"><a class="header-anchor" href="#test-structure" aria-hidden="true">#</a> Test Structure</h3><p>It’s recommended that you structure your tests similar to a UAT. For example, at the root level you would specify your component, and then you would nest your tests as if they were a written sentence. For example, take the following sentence:</p><blockquote><p><strong>On the TextInput component, when the <code>disabled</code> prop is passed, the input will become disabled.</strong></p></blockquote><p>What we end up with are three pieces of information.</p>',10),T=(0,n.Uk)("The "),_=(0,n.Uk)("entity"),j=(0,n.Uk)(" being tested: "),I=(0,n._)("code",null,"TextInput",-1),F=(0,n.Uk)("The "),W=(0,n.Uk)("functionality"),A=(0,n.Uk)(" being tested: the "),S=(0,n._)("code",null,"disabled",-1),E=(0,n.Uk)(" prop being passed"),R=(0,n.Uk)("The desired "),C=(0,n.Uk)("outcome"),q=(0,n.Uk)(": the input will become disabled"),D=(0,n.uE)('<p>Given, this information we can structure our test like so:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;TextInput&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// the entity</span>\n    <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;when the `disabled` prop is provided&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// the functionality</span>\n        <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;the input is disabled&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// the outcome</span>\n            <span class="token comment">// Run tests to satisfy the UAT</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>The idea behind this format is to avoid cases where you might have a test named <code>updates data appropriately</code>. What does “appropriately” mean? If a new developer were to modify this component and update the test in future would they know what the individual requirements of the component are?</p><p>Eventually you will end up with a complete, living UAT document within the codebase.</p><h3 id="fixtures" tabindex="-1"><a class="header-anchor" href="#fixtures" aria-hidden="true">#</a> Fixtures</h3><p>When testing against data, rather than hardcoding your data within your test, it&#39;s better to move this data to a <code>fixture</code>. A fixture is an immutable dataset that your tests are based on to mimic real data. For instance if you have a component which takes data from an endpoint and populates a users table, you might have a <code>users.json</code> fixture with your static data. You would then pull this into your test instead.</p><p>Fixtures should be placed in <code>&lt;root&gt;/tests/fixtures/</code>.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>It&#39;s important that your fixture remains immutable as to not introduce any essence of unpredictability into your tests</p></div>',8),O={},P=(0,s(3744).Z)(O,[["render",function(e,t){const s=(0,n.up)("OutboundLink"),O=(0,n.up)("badge");return(0,n.wg)(),(0,n.iD)(n.HY,null,[a,o,(0,n._)("p",null,[i,(0,n._)("a",r,[l,(0,n.Wm)(s)]),u]),(0,n._)("p",null,[p,(0,n._)("a",c,[d,(0,n.Wm)(s)]),h]),m,k,(0,n._)("p",null,[b,(0,n._)("a",f,[g,(0,n.Wm)(s)])]),(0,n._)("p",null,[y,(0,n._)("a",v,[w,(0,n.Wm)(s)]),x]),U,(0,n._)("ul",null,[(0,n._)("li",null,[T,(0,n.Wm)(O,{vertical:"middle"},{default:(0,n.w5)((()=>[_])),_:1}),j,I]),(0,n._)("li",null,[F,(0,n.Wm)(O,{vertical:"middle"},{default:(0,n.w5)((()=>[W])),_:1}),A,S,E]),(0,n._)("li",null,[R,(0,n.Wm)(O,{vertical:"middle"},{default:(0,n.w5)((()=>[C])),_:1}),q])]),D],64)}]])},3744:(e,t)=>{t.Z=(e,t)=>{for(const[s,n]of t)e[s]=n;return e}},9931:(e,t,s)=>{s.r(t),s.d(t,{data:()=>n});const n={key:"v-57e37f2f",path:"/frontend/testing/unit-testing.html",title:"Unit Testing",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Packages",slug:"packages",children:[{level:3,title:"Vue Storybook Test Utils",slug:"vue-storybook-test-utils",children:[]}]},{level:2,title:"Format",slug:"format",children:[{level:3,title:"File Convention",slug:"file-convention",children:[]},{level:3,title:"Test Structure",slug:"test-structure",children:[]},{level:3,title:"Fixtures",slug:"fixtures",children:[]}]}],filePathRelative:"frontend/testing/unit-testing.md",git:{updatedTime:1664443878e3,contributors:[{name:"Sam Turrell",email:"sam.turrell@netsells.co.uk",commits:1}]}}}}]);