"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6788],{5216:(e,a,n)=>{n.r(a),n.d(a,{default:()=>d});var t=n(6252);const s=(0,t.uE)('<h1 id="clean-architecture" tabindex="-1"><a class="header-anchor" href="#clean-architecture" aria-hidden="true">#</a> Clean Architecture</h1><p>Android projects should use the Clean Architecture to ensure maintainability and testability. In other words, the project should be split into <strong>features</strong> with each feature containing a <strong>data</strong> layer, a <strong>domain</strong> layer, and a <strong>presentation</strong> layer. Additionally, a <code>core</code> directory at the root of the source code directory can hold project-wide code where appropriate.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>+--- src\n    +--- core\n    +--- features\n        +--- my_feature\n            +--- data\n                +--- models\n                    ** Classes which extend entities and provide additional conversion code **\n                +--- datasources\n                    ** Code for retrieving data from external sources **\n                +--- repositories\n                    ** Implementations of the repository interfaces from the domain layer **\n            +--- domain\n                +--- entities\n                    ** Simple data classes with no ties to data or presentation layers **\n                +--- repositories\n                    ** Repository interfaces which will be implemented in the data layer **\n                +--- usecases\n                    ** Use cases, for use by the presentation layer **\n            +--- presentation\n                ** Activities, fragments, adapters, and views **\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><em>Consider splitting your project into an <code>app</code> module, containing the data and presentation layers, and a <code>core</code> module containing the domain layer.</em></p><h2 id="domain-layer" tabindex="-1"><a class="header-anchor" href="#domain-layer" aria-hidden="true">#</a> Domain Layer</h2><p>When writing a feature it&#39;s sensible to write the domain layer first.</p><p>Start with <strong>entities</strong>, which should be simple Kotlin data classes representing the data this feature is working with.</p><p>Then create <strong>repositories</strong>, which should be <strong>interfaces</strong> or <strong>abstract classes</strong> defining the data transactions supported by this feature.</p><p>Then create <strong>use cases</strong>, which are designed to be called by the presentation layer. These should call the <strong>repositories</strong> and return data as the presentation layer requires it. In other words, use cases are delegates for the presentation layer&#39;s business logic.</p><h2 id="data-layer" tabindex="-1"><a class="header-anchor" href="#data-layer" aria-hidden="true">#</a> Data layer</h2><p>The data layer implements the repositories defined in the domain layer. This is done by implementing <strong>data sources</strong>, which fetch data from remote locations like databases and APIs. This data is then passed to the repository implementatations in the form of <strong>models</strong>, which extend the <strong>entities</strong> defined in the domain layer.</p><h2 id="presentation-layer" tabindex="-1"><a class="header-anchor" href="#presentation-layer" aria-hidden="true">#</a> Presentation layer</h2><p>This layer contains all presentation-related code including activities, fragments, viewmodels, adapters etc. It should use <strong>usecases</strong> to interact with the domain layer.</p>',13),r=(0,t.Uk)("The presentation layer should be built using "),i=(0,t.Uk)("MVVM"),o=(0,t.Uk)("."),l={},d=(0,n(3744).Z)(l,[["render",function(e,a){const n=(0,t.up)("RouterLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[s,(0,t._)("p",null,[r,(0,t.Wm)(n,{to:"/android/mvvm.html"},{default:(0,t.w5)((()=>[i])),_:1}),o])],64)}]])},3744:(e,a)=>{a.Z=(e,a)=>{for(const[n,t]of a)e[n]=t;return e}},7722:(e,a,n)=>{n.r(a),n.d(a,{data:()=>t});const t={key:"v-466569ae",path:"/android/clean-architecture.html",title:"Clean Architecture",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Domain Layer",slug:"domain-layer",children:[]},{level:2,title:"Data layer",slug:"data-layer",children:[]},{level:2,title:"Presentation layer",slug:"presentation-layer",children:[]}],filePathRelative:"android/clean-architecture.md",git:{updatedTime:16547678e5,contributors:[{name:"Sam Turrell",email:"sam.turrell@netsells.co.uk",commits:1}]}}}}]);