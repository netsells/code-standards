"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2166],{9424:(n,s,a)=>{a.r(s),a.d(s,{default:()=>D});var e=a(6252);const t=(0,e._)("h1",{id:"state-management-using-bloc",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#state-management-using-bloc","aria-hidden":"true"},"#"),(0,e.Uk)(" State Management using Bloc")],-1),o=(0,e.Uk)("There are a number of patterns and packages available to handle state management. Our preferred pattern is "),c={href:"https://bloclibrary.dev/",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("Bloc"),p=(0,e.Uk)("."),r=(0,e.uE)('<h2 id="writing-blocs" tabindex="-1"><a class="header-anchor" href="#writing-blocs" aria-hidden="true">#</a> Writing Blocs</h2><h3 id="file-structure" tabindex="-1"><a class="header-anchor" href="#file-structure" aria-hidden="true">#</a> File Structure</h3><p>Each Bloc should be composed of 3 files with the following naming convention:</p><ul><li><code>subject_bloc.dart</code> - Contains the Bloc class itself</li><li><code>subject_state.dart</code> - Contains the state definition(s)</li><li><code>subject_event.dart</code> - Contains the event definition(s)</li></ul><p>They should be linked using Dart&#39;s <code>part</code> syntax:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token comment">// subject_bloc.dart</span>\n\n<span class="token keyword">part</span> <span class="token string-literal"><span class="token string">&#39;subject_state.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">part</span> <span class="token string-literal"><span class="token string">&#39;subject_event.dart&#39;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token comment">// subject_state.dart</span>\n\n<span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">&#39;subject_bloc.dart&#39;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token comment">// subject_event.dart</span>\n\n<span class="token keyword">part</span> of <span class="token string-literal"><span class="token string">&#39;subject_bloc.dart&#39;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This means that importing <code>subject_bloc.dart</code> will also bring with it the state and event files automatically.</p><h3 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h3>',10),u=(0,e.Uk)("We strongly recommend writing events as either "),i=(0,e._)("code",null,"enum",-1),k=(0,e.Uk)("s or sealed unions (using "),d={href:"https://pub.dev/packages/freezed",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("freezed"),b=(0,e.Uk)(")."),_=(0,e.uE)('<p>Events should be named in the <strong>past tense</strong>, and have the following anatomy:</p><blockquote><p><code>BlocSubject</code> + <code>Noun (optional)</code> + <code>Verb</code></p></blockquote><h4 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h4><h5 id="enum-events" tabindex="-1"><a class="header-anchor" href="#enum-events" aria-hidden="true">#</a> Enum Events</h5>',4),h=(0,e._)("div",{class:"language-dart ext-dart line-numbers-mode"},[(0,e._)("pre",{class:"language-dart"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"enum"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"CounterEvent"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)(" started"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" incremented"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" decremented "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br")])],-1),g=(0,e._)("div",{class:"language-dart ext-dart line-numbers-mode"},[(0,e._)("pre",{class:"language-dart"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"enum"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"CounterEvent"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)(" init"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" increment"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" decrement "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br")])],-1),v=(0,e._)("h4",{id:"sealed-union-events",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#sealed-union-events","aria-hidden":"true"},"#"),(0,e.Uk)(" Sealed Union Events")],-1),f=(0,e._)("div",{class:"language-dart ext-dart line-numbers-mode"},[(0,e._)("pre",{class:"language-dart"},[(0,e._)("code",null,[(0,e._)("span",{class:"token metadata function"},"@freezed"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"CounterEvent"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"with"),(0,e.Uk)(" _$"),(0,e._)("span",{class:"token class-name"},"CounterEvent"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"factory"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"CounterEvent"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"started"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" _Started"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"factory"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"CounterEvent"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"incrementPressed"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" _IncrementPressed"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"factory"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"CounterEvent"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"decrementPressed"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" _DecrementPressed"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br")])],-1),w=(0,e._)("div",{class:"language-dart ext-dart line-numbers-mode"},[(0,e._)("pre",{class:"language-dart"},[(0,e._)("code",null,[(0,e._)("span",{class:"token metadata function"},"@freezed"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"CounterEvent"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"with"),(0,e.Uk)(" _$"),(0,e._)("span",{class:"token class-name"},"CounterEvent"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"factory"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"CounterEvent"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"init"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" _Init"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"factory"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"CounterEvent"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"increment"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" _Increment"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"factory"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"CounterEvent"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"doDecrement"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" _DoDecrement"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br")])],-1),U=(0,e._)("h3",{id:"states",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#states","aria-hidden":"true"},"#"),(0,e.Uk)(" States")],-1),y=(0,e.Uk)("As with Events, we strongly recommend writing states as either "),E=(0,e._)("code",null,"enum",-1),x=(0,e.Uk)("s or sealed unions (using "),B={href:"https://pub.dev/packages/freezed",target:"_blank",rel:"noopener noreferrer"},C=(0,e.Uk)("freezed"),S=(0,e.Uk)(")."),P=(0,e.uE)('<p>State class names should always have the following anatomy:</p><blockquote><p><code>BlocSubject</code> + <code>State</code></p></blockquote><h4 id="examples-1" tabindex="-1"><a class="header-anchor" href="#examples-1" aria-hidden="true">#</a> Examples</h4><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">enum</span> <span class="token class-name">CounterState</span> <span class="token punctuation">{</span> initial<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failure <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token metadata function">@freezed</span>\n<span class="token keyword">class</span> <span class="token class-name">CounterState</span> <span class="token keyword">with</span> _$<span class="token class-name">CounterState</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token keyword">factory</span> <span class="token class-name">CounterState</span><span class="token punctuation">.</span><span class="token function">initial</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> _Initial<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token keyword">factory</span> <span class="token class-name">CounterState</span><span class="token punctuation">.</span><span class="token function">loading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> _Loading<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token keyword">factory</span> <span class="token class-name">CounterState</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>int count<span class="token punctuation">)</span> <span class="token operator">=</span> _Success<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token keyword">factory</span> <span class="token class-name">CounterState</span><span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token operator">=</span> _Failure<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="event-handlers" tabindex="-1"><a class="header-anchor" href="#event-handlers" aria-hidden="true">#</a> Event Handlers</h3><p>Each event handler should be written as its own <strong>private</strong> method within the Bloc class, and registered as part of the Bloc&#39;s constructor using the <code>on</code> method.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">CounterBloc</span> <span class="token keyword">extends</span> <span class="token class-name">Bloc</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CounterEvent</span><span class="token punctuation">,</span> int<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token class-name">CounterBloc</span><span class="token punctuation">(</span><span class="token punctuation">{</span>int intitialState <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span>_IncrementPressed<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_onIncrement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">on</span><span class="token generics"><span class="token punctuation">&lt;</span>_DecrementPressed<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_onDecremented<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">void</span> <span class="token function">_onIncremented</span><span class="token punctuation">(</span>_IncrementPressed event<span class="token punctuation">,</span> <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CounterState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">emit</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">void</span> <span class="token function">_onDecremented</span><span class="token punctuation">(</span>_DecrementPressed event<span class="token punctuation">,</span> <span class="token class-name">Emitter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CounterState</span><span class="token punctuation">&gt;</span></span> emit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">emit</span><span class="token punctuation">(</span>state <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="using-blocs" tabindex="-1"><a class="header-anchor" href="#using-blocs" aria-hidden="true">#</a> Using Blocs</h2><p>Always use <code>BlocProvider</code> to inject your Blocs into the widget tree. <code>BlocProvider</code> has a couple of important advantages:</p><ul><li>Automatically handles Bloc creation and closure</li><li>Makes the Bloc available to all children below the Provider in the tree</li></ul><p><code>BlocProvider</code> allows us to very easily manage the scope of each Bloc in our project. Some Blocs apply to individual screens, where as some Blocs are useful throughout the application (e.g. blocs handling authentication state). Use this fact to your advantage, and don&#39;t be afraid to wrap the whole <code>MaterialApp</code> in a <code>BlocProvider</code>!. It&#39;s a great way to maintain a single source of truth for the state of your app.</p><blockquote><p>Tip: Use <code>MultiBlocProvider</code> to provide multiple Blocs without having to nest loads of individual <code>BlocProvider</code>s.</p></blockquote>',13),j={},D=(0,a(3744).Z)(j,[["render",function(n,s){const a=(0,e.up)("OutboundLink"),j=(0,e.up)("code-highlight");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[o,(0,e._)("a",c,[l,(0,e.Wm)(a)]),p]),r,(0,e._)("p",null,[u,i,k,(0,e._)("a",d,[m,(0,e.Wm)(a)]),b]),_,(0,e.Wm)(j,null,{correct:(0,e.w5)((()=>[h])),incorrect:(0,e.w5)((()=>[g])),_:1}),v,(0,e.Wm)(j,null,{correct:(0,e.w5)((()=>[f])),incorrect:(0,e.w5)((()=>[w])),_:1}),U,(0,e._)("p",null,[y,E,x,(0,e._)("a",B,[C,(0,e.Wm)(a)]),S]),P],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}},8271:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-97fb1a00",path:"/flutter/legacy/state-management.html",title:"State Management using Bloc",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Writing Blocs",slug:"writing-blocs",children:[{level:3,title:"File Structure",slug:"file-structure",children:[]},{level:3,title:"Events",slug:"events",children:[]},{level:3,title:"States",slug:"states",children:[]},{level:3,title:"Event Handlers",slug:"event-handlers",children:[]}]},{level:2,title:"Using Blocs",slug:"using-blocs",children:[]}],filePathRelative:"flutter/legacy/state-management.md",git:{updatedTime:1662973121e3,contributors:[{name:"Sam Turrell",email:"sam.turrell@netsells.co.uk",commits:1}]}}}}]);