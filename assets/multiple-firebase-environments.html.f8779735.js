import{_ as o,r as a,o as i,c as r,a as n,b as e,d,e as t}from"./app.33d3398e.js";const c="/code-standards/assets/firebase-1.2e63e8ed.png",p="/code-standards/assets/firebase-2.b650b5c0.png",l="/code-standards/assets/firebase-3.91e1c3c2.png",u={},h=t('<h1 id="multiple-firebase-environments" tabindex="-1"><a class="header-anchor" href="#multiple-firebase-environments" aria-hidden="true">#</a> Multiple Firebase Environments</h1><p>If you&#39;re using Firebase for your Flutter app, you <strong>must</strong> set up multiple environments for staging and production versions of the app. This ensures that any data is kept separate, and access can be tailored to suit the environment.</p><p>This guide will take you through the process of configuring a Flutter app to work with multiple Firebase projects.</p><h2 id="step-1-create-firebase-projects" tabindex="-1"><a class="header-anchor" href="#step-1-create-firebase-projects" aria-hidden="true">#</a> Step 1: Create Firebase projects</h2><p>You&#39;ll need to create 2 Firebase projects in the usual way for your app. Our naming convention is [App Name] - [Environment].</p><p>For example, for Flexed, our projects are:</p><ul><li>Flexed - Staging</li><li>Flexed - Production</li></ul><p>Within each project, create iOS and Android apps. Ignore the setup steps for now, but download the relevant configuration files (the <code>google-services.json</code> and <code>GoogleService-Info.plist</code> files).</p><p>The bundle IDs should be the same <strong>except</strong> that the staging IDs should have the <code>.stg</code> suffix:</p><ul><li>Staging: <code>uk.co.flexed.stg</code></li><li>Production: <code>uk.co.flexed</code></li></ul><p>Finally, set up any Firebase products you may need (App Distribution, Analytics etc).</p><h2 id="step-2-set-up-firebase-in-your-app" tabindex="-1"><a class="header-anchor" href="#step-2-set-up-firebase-in-your-app" aria-hidden="true">#</a> Step 2: Set up Firebase in your app</h2>',12),g={href:"https://firebase.flutter.dev/docs/overview",target:"_blank",rel:"noopener noreferrer"},f=n("strong",null,"don't",-1),v=t(`<h2 id="step-3-android-configuration-setup" tabindex="-1"><a class="header-anchor" href="#step-3-android-configuration-setup" aria-hidden="true">#</a> Step 3: Android configuration setup</h2><p>We first need to create product flavors for the staging and production environments. In the <code>android/app/build.gradle</code> file, in the <code>android</code> section, add the following:</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>flavorDimensions <span class="token interpolation-string"><span class="token string">&quot;env&quot;</span></span>
productFlavors <span class="token punctuation">{</span>
	production <span class="token punctuation">{</span>
		dimension <span class="token interpolation-string"><span class="token string">&quot;env&quot;</span></span>
		applicationIdSuffix <span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span>
		resValue <span class="token interpolation-string"><span class="token string">&quot;string&quot;</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">&quot;app_name&quot;</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">&quot;{{INSERT YOUR APP NAME HERE}}&quot;</span></span>
	<span class="token punctuation">}</span>
	staging <span class="token punctuation">{</span>
		dimension <span class="token interpolation-string"><span class="token string">&quot;env&quot;</span></span>
		applicationIdSuffix <span class="token interpolation-string"><span class="token string">&quot;.stg&quot;</span></span>
		resValue <span class="token interpolation-string"><span class="token string">&quot;string&quot;</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">&quot;app_name&quot;</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">&quot;{{INSERT YOUR APP NAME HERE}} [STG]&quot;</span></span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, copy the <code>google-services.json</code> files we downloaded earlier into the following directories:</p><ul><li>Production: <code>android/app/src/production</code></li><li>Staging: <code>android/app/src/staging</code></li></ul><p>That&#39;s it!</p><h2 id="step-4-ios-configuration-setup" tabindex="-1"><a class="header-anchor" href="#step-4-ios-configuration-setup" aria-hidden="true">#</a> Step 4: iOS Configuration Setup</h2><h3 id="add-your-plist-files" tabindex="-1"><a class="header-anchor" href="#add-your-plist-files" aria-hidden="true">#</a> Add your PLIST files</h3><p>Take the <code>GoogleService-Info.plist</code> files we downloaded from Firebase earlier and rename them as follows:</p><ul><li>Staging: <code>GoogleService-Info-stg.plist</code></li><li>Production: <code>GoogleService-Info-prod.plist</code></li></ul><p>Then, create a directory under <code>ios/Runner</code> called <code>Firebase</code>, and move the PLIST files into that folder. <strong>Don&#39;t use Xcode for this step!</strong></p><p>Next, open Xcode, and drag the Firebase directory we just created into the project.</p><p><strong>Be sure to uncheck &quot;Copy items if needed&quot; and all targets under &quot;Add to targets&quot;.</strong></p><p><img src="`+c+'" alt="image"></p><h3 id="create-custom-schemes" tabindex="-1"><a class="header-anchor" href="#create-custom-schemes" aria-hidden="true">#</a> Create custom schemes</h3><p>In Xcode again, go to <strong>Product → Scheme → Manage Schemes</strong>, and use the + button to create two new schemes, targeting &quot;Runner&quot;, named <code>production</code> and <code>staging</code>:</p><p><img src="'+p+'" alt="image"></p><p><em>Make sure the Shared checkbox is enabled for each of these new schemes.</em></p><p>Now select the Runner project and check that you have the following configurations set up:</p><p><img src="'+l+'" alt="image"></p><h3 id="add-a-new-run-script-build-phase" tabindex="-1"><a class="header-anchor" href="#add-a-new-run-script-build-phase" aria-hidden="true">#</a> Add a new Run Script build phase</h3><p>Select the Runner target in Xcode and go to <strong>Build Phases</strong>. Use the + button to add a new Run Script phase, and paste the following script:</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>PLIST_DESTINATION=${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app\n\nif [ &quot;${CONFIGURATION}&quot; == &quot;Debug-staging&quot; ] || [ &quot;${CONFIGURATION}&quot; == &quot;Release-staging&quot; ] || [ &quot;${CONFIGURATION}&quot; == &quot;Profile-staging&quot; ]; then\ncp -r &quot;${PROJECT_DIR}/Runner/Firebase/GoogleService-Info-stg.plist&quot; &quot;${PLIST_DESTINATION}/GoogleService-Info.plist&quot;\necho &quot;Staging plist copied&quot;\nelif [ &quot;${CONFIGURATION}&quot; == &quot;Debug-production&quot; ] || [ &quot;${CONFIGURATION}&quot; == &quot;Release-production&quot; ] || [ &quot;${CONFIGURATION}&quot; == &quot;Profile-production&quot; ]; then\ncp -r &quot;${PROJECT_DIR}/Runner/Firebase/GoogleService-Info-prod.plist&quot; &quot;${PLIST_DESTINATION}/GoogleService-Info.plist&quot;\necho &quot;Production plist copied&quot;\nfi\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This script will copy the relevant PLIST file into the final app binary.</p><h2 id="step-5-run-or-build-using-the-correct-flavor" tabindex="-1"><a class="header-anchor" href="#step-5-run-or-build-using-the-correct-flavor" aria-hidden="true">#</a> Step 5: Run or build using the correct flavor</h2><p>Now, whenever you build or run the app, simply add <code>--flavor staging</code> or <code>--flavor production</code> to the command to specify which flavour you need.</p>',26);function m(b,q){const s=a("ExternalLinkIcon");return i(),r("div",null,[h,n("p",null,[e("Follow the setup steps linked "),n("a",g,[e("here"),d(s)]),e(" to integrate Firebase into your app, including the platform-specific installation guides for iOS and Android. However, "),f,e(" add the configuration files yet.")]),v])}const I=o(u,[["render",m],["__file","multiple-firebase-environments.html.vue"]]);export{I as default};
