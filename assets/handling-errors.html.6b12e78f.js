import{_ as t,r as o,o as r,c,a as n,b as e,d as l,e as s}from"./app.d923ba41.js";const i={},p=s('<h1 id="handling-error" tabindex="-1"><a class="header-anchor" href="#handling-error" aria-hidden="true">#</a> Handling Error</h1><h2 id="principles" tabindex="-1"><a class="header-anchor" href="#principles" aria-hidden="true">#</a> Principles</h2><ul><li>There is a difference between <strong>errors</strong> and <strong>exceptions</strong>. <ul><li><strong>Errors</strong> are things that could happen, but are not considered exceptional e.g. a network error.</li><li><strong>Exceptions</strong> are things that are exceptional e.g. a <code>StackOverflowError</code>. If these happen, a developer has made a mistake.</li></ul></li><li>When <strong>errors</strong> occur, we should fail elegantly in a way that informs the user of the error and suggests a solution.</li><li>When <strong>exceptions</strong> occur, we treat them as bugs which should be fixed.</li><li>When a method could return an error, we should communicate this explicitly in the return type. This encourages developers to handle error cases.</li></ul><h2 id="implementing-error-handling" tabindex="-1"><a class="header-anchor" href="#implementing-error-handling" aria-hidden="true">#</a> Implementing Error Handling</h2>',4),d=n("code",null,"Either<T, U>",-1),u={href:"https://pub.dev/packages/dartz",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"dartz",-1),k=n("code",null,"T",-1),m=n("code",null,"U",-1),g=s(`<p>Error types may, minimally, be simple <code>String</code>s or <code>int</code>s, but ideally should be <code>Failure</code> classes which encapsulate the details of the error.</p><p><em>Remember that we should only be handling errors we expect to happen, like <code>4xx</code> responses from network requests.</em></p><p>Here&#39;s an example a method which could return a <code>Failure</code> or a <code>String</code>:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Either</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Failure</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">nthItem</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">,</span> int n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">&gt;=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Failure</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Index out of bounds.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> items<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function f(_,b){const a=o("ExternalLinkIcon");return r(),c("div",null,[p,n("p",null,[e("Our preferred method of error handling is to use the "),d,e(" type, provided by the "),n("a",u,[h,l(a)]),e(" package. "),k,e(" is the type of the error, and "),m,e(" is the type of the successful result.")]),g])}const x=t(i,[["render",f],["__file","handling-errors.html.vue"]]);export{x as default};
